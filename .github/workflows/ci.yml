name: CI

on:
  push:
    branches: [main, develop]
    paths:
      - 'src/qdash/**'
      - '!src/qdash/client/**'  # Exclude generated client code
      - 'tests/**'
      - 'pyproject.toml'
      - 'uv.lock'
      - '.github/workflows/ci.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'src/qdash/**'
      - '!src/qdash/client/**'  # Exclude generated client code
      - 'tests/**'
      - 'pyproject.toml'
      - 'uv.lock'
      - '.github/workflows/ci.yml'

jobs:
  lint-and-format:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Install Go Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x

      - name: Set up Python
        run: uv python install 3.10

      - name: Install dependencies (excluding workflow group)
        run: uv sync --group dev --group api --group agent

      - name: Run linting and format check
        run: |
          task lint         # Excludes generated client code (see pyproject.toml)
          task lint-mypy

  test:
    runs-on: ubuntu-latest
    needs: lint-and-format
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "sh -c 'mongosh --quiet --eval \"db.runCommand({ping:1}).ok || quit(1)\"'"
          --health-interval 15s
          --health-timeout 10s
          --health-retries 8

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Install Go Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x

      - name: Set up Python ${{ matrix.python-version }}
        run: uv python install ${{ matrix.python-version }}

      - name: Install dependencies (excluding workflow group)
        run: uv sync --group dev --group api --group agent

      - name: Run tests using Task
        run: task test

      - name: Generate coverage report
        if: matrix.python-version == '3.10'
        run: task test-coverage

      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.10'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}


