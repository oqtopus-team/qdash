version: 3

tasks:
  default:
    desc: Display available tasks
    cmds:
      - task -l
  generate:
    dir: client
    cmds:
      - curl http://localhost:5715/openapi.json | jq > ../docs/oas/openapi.json
      - npx orval --config ./orval.config.cjs
      - npx prettier . --write
      - npx eslint . --fix
    desc: Generate the client

  docs:
    dir: docs
    cmds:
      - npm run docs:dev

  build-docs:
    dir: docs
    cmds:
      - npm run docs:build
      # - poetry run mkdocs serve

  fmt-client:
    dir: client
    cmds:
      - npx prettier . --write
      - npx eslint . --fix
    desc: Format the client

  fmt:
    cmds:
      - poetry run ruff format .
      - npx prettier . --write
      - npx eslint . --fix
    desc: Format common code

  tbls-docs:
    cmds:
      - tbls doc -c .tbls.yml -f
    desc: Generate DB Schema Docs

  export-server:
    cmds:
      - poetry export -f requirements.txt --output ./backend/server/requirements.txt --without-hashes --with=server,dev
    desc: Export server requirements

  export-qcflow:
    cmds:
      - poetry export -f requirements.txt --output ./backend/qcflow/requirements.txt --without-hashes --with=qcflow,dev
    desc: Export qcflow requirements

  export-all:
    cmds:
      - poetry export -f requirements.txt --output ./.devcontainer/requirements.txt --without-hashes --with=server,qcflow,dev
    desc: Export all requirements

  build-server:
    cmds:
      - poetry export -f requirements.txt --output ./backend/server/requirements.txt --without-hashes --with=server,dev
      - docker compose build --no-cache server

  build-qcflow:
    cmds:
      - poetry export -f requirements.txt --output qcflow.requirements.txt --without-hashes --with=qcflow,dev
      - docker compose build --no-cache qcflow

  requirements:
    cmds:
      - poetry export -f requirements.txt --output requirements.txt --without-hashes
    desc: Generate requirements.txt
