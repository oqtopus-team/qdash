version: 3

tasks:
  default:
    desc: Display available tasks
    cmds:
      - task -l
  generate:
    dir: ui
    cmds:
      - curl http://localhost:5715/openapi.json | jq > ../docs/oas/openapi.json
      - npx orval --config ./orval.config.cjs
      - npx prettier . --write
      - npm run fmt
    desc: Generate the client

  docs:
    dir: docs
    cmds:
      - npm run docs:dev

  build:
    dir: ui
    cmds:
      - npm run build

  build-docs:
    dir: docs
    cmds:
      - npm run docs:build
      # - poetry run mkdocs serve

  fmt-client:
    dir: client
    cmds:
      - npx prettier . --write
      - npx eslint . --fix
    desc: Format the client

  fmt:
    cmds:
      - poetry run ruff format .
      - npx prettier . --write
      - npx eslint . --fix
    desc: Format common code

  tbls-docs:
    cmds:
      - tbls doc -c .tbls.yml -f
    desc: Generate DB Schema Docs

  export-api:
    cmds:
      - poetry export -f requirements.txt --output ./src/qdash/api/requirements.txt --without-hashes --with=api,dev
    desc: Export server requirements

  export-workflow:
    cmds:
      - poetry export -f requirements.txt --output ./src/qdash/workflow/requirements.txt --without-hashes --with=workflow,dev
    desc: Export qcflow requirements

  export-all:
    cmds:
      - poetry export -f requirements.txt --output ./.devcontainer/requirements.txt --without-hashes --with=api,workflow,dev
    desc: Export all requirements

  build-api:
    cmds:
      - poetry export -f requirements.txt --output ./src/qdash/api/requirements.txt --without-hashes --with=api,dev
      - docker compose build --no-cache api

  build-workflow:
    cmds:
      - poetry export -f requirements.txt --output ./src/qdash/workflow/requirements.txt --without-hashes --with=workflow,dev
      - docker compose build --no-cache workflow

  requirements:
    cmds:
      - poetry export -f requirements.txt --output requirements.txt --without-hashes
    desc: Generate requirements.txt
