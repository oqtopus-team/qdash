/**
 * Generated by orval v7.6.0 üç∫
 * Do not edit manually.
 * QDash API
 * API for QDash
 * OpenAPI spec version: 0.0.1
 */
import { useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import axios from "axios";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";

import type { ListTagResponse } from "../../schemas";

/**
 * Fetch all tasks.

Args:
----
    current_user (User): The current user.

Returns:
-------
    ListTaskResponse: The list of tasks.
 * @summary list all tag
 */
export const listAllTag = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ListTagResponse>> => {
  return axios.get(`http://localhost:5716/api/tag`, options);
};

export const getListAllTagQueryKey = () => {
  return [`http://localhost:5716/api/tag`] as const;
};

export const getListAllTagQueryOptions = <
  TData = Awaited<ReturnType<typeof listAllTag>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listAllTag>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListAllTagQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listAllTag>>> = ({
    signal,
  }) => listAllTag({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listAllTag>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type ListAllTagQueryResult = NonNullable<
  Awaited<ReturnType<typeof listAllTag>>
>;
export type ListAllTagQueryError = AxiosError<unknown>;

export function useListAllTag<
  TData = Awaited<ReturnType<typeof listAllTag>>,
  TError = AxiosError<unknown>,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listAllTag>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof listAllTag>>,
        TError,
        Awaited<ReturnType<typeof listAllTag>>
      >,
      "initialData"
    >;
  axios?: AxiosRequestConfig;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useListAllTag<
  TData = Awaited<ReturnType<typeof listAllTag>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listAllTag>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof listAllTag>>,
        TError,
        Awaited<ReturnType<typeof listAllTag>>
      >,
      "initialData"
    >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useListAllTag<
  TData = Awaited<ReturnType<typeof listAllTag>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listAllTag>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary list all tag
 */

export function useListAllTag<
  TData = Awaited<ReturnType<typeof listAllTag>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listAllTag>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getListAllTagQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
