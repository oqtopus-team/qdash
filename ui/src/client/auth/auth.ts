/**
 * Generated by orval v7.6.0 üç∫
 * Do not edit manually.
 * QDash Server
 * API for QDash
 * OpenAPI spec version: 0.0.1
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import axios from "axios";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";

import type {
  BodyAuthLoginForAccessToken,
  HTTPValidationError,
  Token,
  User,
  UserCreate,
} from "../../schemas";

/**
 * @summary Login For Access Token
 */
export const authLoginForAccessToken = (
  bodyAuthLoginForAccessToken: BodyAuthLoginForAccessToken,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<Token>> => {
  const formUrlEncoded = new URLSearchParams();
  formUrlEncoded.append("username", bodyAuthLoginForAccessToken.username);
  formUrlEncoded.append("password", bodyAuthLoginForAccessToken.password);
  if (bodyAuthLoginForAccessToken.grant_type !== undefined) {
    formUrlEncoded.append("grant_type", bodyAuthLoginForAccessToken.grant_type);
  }

  return axios.post(
    `http://localhost:5715/auth/token`,
    formUrlEncoded,
    options,
  );
};

export const getAuthLoginForAccessTokenMutationOptions = <
  TError = AxiosError<void | HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authLoginForAccessToken>>,
    TError,
    { data: BodyAuthLoginForAccessToken },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authLoginForAccessToken>>,
  TError,
  { data: BodyAuthLoginForAccessToken },
  TContext
> => {
  const mutationKey = ["authLoginForAccessToken"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authLoginForAccessToken>>,
    { data: BodyAuthLoginForAccessToken }
  > = (props) => {
    const { data } = props ?? {};

    return authLoginForAccessToken(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthLoginForAccessTokenMutationResult = NonNullable<
  Awaited<ReturnType<typeof authLoginForAccessToken>>
>;
export type AuthLoginForAccessTokenMutationBody = BodyAuthLoginForAccessToken;
export type AuthLoginForAccessTokenMutationError =
  AxiosError<void | HTTPValidationError>;

/**
 * @summary Login For Access Token
 */
export const useAuthLoginForAccessToken = <
  TError = AxiosError<void | HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authLoginForAccessToken>>,
    TError,
    { data: BodyAuthLoginForAccessToken },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof authLoginForAccessToken>>,
  TError,
  { data: BodyAuthLoginForAccessToken },
  TContext
> => {
  const mutationOptions = getAuthLoginForAccessTokenMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Register User
 */
export const authRegisterUser = (
  userCreate: UserCreate,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<User>> => {
  return axios.post(`http://localhost:5715/auth/register`, userCreate, options);
};

export const getAuthRegisterUserMutationOptions = <
  TError = AxiosError<void | HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authRegisterUser>>,
    TError,
    { data: UserCreate },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authRegisterUser>>,
  TError,
  { data: UserCreate },
  TContext
> => {
  const mutationKey = ["authRegisterUser"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authRegisterUser>>,
    { data: UserCreate }
  > = (props) => {
    const { data } = props ?? {};

    return authRegisterUser(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthRegisterUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof authRegisterUser>>
>;
export type AuthRegisterUserMutationBody = UserCreate;
export type AuthRegisterUserMutationError =
  AxiosError<void | HTTPValidationError>;

/**
 * @summary Register User
 */
export const useAuthRegisterUser = <
  TError = AxiosError<void | HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authRegisterUser>>,
    TError,
    { data: UserCreate },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof authRegisterUser>>,
  TError,
  { data: UserCreate },
  TContext
> => {
  const mutationOptions = getAuthRegisterUserMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Read Users Me
 */
export const authReadUsersMe = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<User>> => {
  return axios.get(`http://localhost:5715/auth/me`, options);
};

export const getAuthReadUsersMeQueryKey = () => {
  return [`http://localhost:5715/auth/me`] as const;
};

export const getAuthReadUsersMeQueryOptions = <
  TData = Awaited<ReturnType<typeof authReadUsersMe>>,
  TError = AxiosError<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof authReadUsersMe>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAuthReadUsersMeQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof authReadUsersMe>>> = ({
    signal,
  }) => authReadUsersMe({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof authReadUsersMe>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type AuthReadUsersMeQueryResult = NonNullable<
  Awaited<ReturnType<typeof authReadUsersMe>>
>;
export type AuthReadUsersMeQueryError = AxiosError<void>;

export function useAuthReadUsersMe<
  TData = Awaited<ReturnType<typeof authReadUsersMe>>,
  TError = AxiosError<void>,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof authReadUsersMe>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof authReadUsersMe>>,
        TError,
        Awaited<ReturnType<typeof authReadUsersMe>>
      >,
      "initialData"
    >;
  axios?: AxiosRequestConfig;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useAuthReadUsersMe<
  TData = Awaited<ReturnType<typeof authReadUsersMe>>,
  TError = AxiosError<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof authReadUsersMe>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof authReadUsersMe>>,
        TError,
        Awaited<ReturnType<typeof authReadUsersMe>>
      >,
      "initialData"
    >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useAuthReadUsersMe<
  TData = Awaited<ReturnType<typeof authReadUsersMe>>,
  TError = AxiosError<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof authReadUsersMe>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Read Users Me
 */

export function useAuthReadUsersMe<
  TData = Awaited<ReturnType<typeof authReadUsersMe>>,
  TError = AxiosError<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof authReadUsersMe>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getAuthReadUsersMeQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Logout endpoint.

This endpoint doesn't need to do anything on the backend since the token is managed client-side.
The client will remove the token from cookies.
 * @summary Logout
 */
export const authLogout = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<unknown>> => {
  return axios.post(`http://localhost:5715/auth/logout`, undefined, options);
};

export const getAuthLogoutMutationOptions = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authLogout>>,
    TError,
    void,
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authLogout>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["authLogout"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authLogout>>,
    void
  > = () => {
    return authLogout(axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthLogoutMutationResult = NonNullable<
  Awaited<ReturnType<typeof authLogout>>
>;

export type AuthLogoutMutationError = AxiosError<void>;

/**
 * @summary Logout
 */
export const useAuthLogout = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authLogout>>,
    TError,
    void,
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof authLogout>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getAuthLogoutMutationOptions(options);

  return useMutation(mutationOptions);
};
