/**
 * Generated by orval v7.14.0 üç∫
 * Do not edit manually.
 * QDash API
 * API for QDash
 * OpenAPI spec version: 0.0.1
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  DeleteFlow200,
  ExecuteFlowRequest,
  ExecuteFlowResponse,
  FlowTemplate,
  FlowTemplateWithCode,
  GetFlowResponse,
  HTTPValidationError,
  ListFlowsResponse,
  SaveFlowRequest,
  SaveFlowResponse,
} from "../../schemas";

import { customInstance } from "../../lib/custom-instance";
import type { ErrorType, BodyType } from "../../lib/custom-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * List all Flows for the current user.

Returns metadata only (no code content for performance).
 * @summary List Flows
 */
export const listFlows = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ListFlowsResponse>(
    { url: `/api/flow`, method: "GET", signal },
    options,
  );
};

export const getListFlowsQueryKey = () => {
  return [`/api/flow`] as const;
};

export const getListFlowsQueryOptions = <
  TData = Awaited<ReturnType<typeof listFlows>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listFlows>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListFlowsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listFlows>>> = ({
    signal,
  }) => listFlows(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listFlows>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type ListFlowsQueryResult = NonNullable<
  Awaited<ReturnType<typeof listFlows>>
>;
export type ListFlowsQueryError = ErrorType<unknown>;

export function useListFlows<
  TData = Awaited<ReturnType<typeof listFlows>>,
  TError = ErrorType<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listFlows>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listFlows>>,
          TError,
          Awaited<ReturnType<typeof listFlows>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useListFlows<
  TData = Awaited<ReturnType<typeof listFlows>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listFlows>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listFlows>>,
          TError,
          Awaited<ReturnType<typeof listFlows>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useListFlows<
  TData = Awaited<ReturnType<typeof listFlows>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listFlows>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary List Flows
 */

export function useListFlows<
  TData = Awaited<ReturnType<typeof listFlows>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listFlows>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getListFlowsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Save a Flow to file system and MongoDB.

Steps:
1. Validate flow name
2. Validate flow code contains expected function
3. Create user directory if not exists
4. Write code to file: user_flows/{username}/{name}.py
5. Upsert metadata to MongoDB
6. Return file path and success message
 * @summary Save a Flow
 */
export const saveFlow = (
  saveFlowRequest: BodyType<SaveFlowRequest>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<SaveFlowResponse>(
    {
      url: `/api/flow`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: saveFlowRequest,
      signal,
    },
    options,
  );
};

export const getSaveFlowMutationOptions = <
  TError = ErrorType<HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof saveFlow>>,
    TError,
    { data: BodyType<SaveFlowRequest> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof saveFlow>>,
  TError,
  { data: BodyType<SaveFlowRequest> },
  TContext
> => {
  const mutationKey = ["saveFlow"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof saveFlow>>,
    { data: BodyType<SaveFlowRequest> }
  > = (props) => {
    const { data } = props ?? {};

    return saveFlow(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type SaveFlowMutationResult = NonNullable<
  Awaited<ReturnType<typeof saveFlow>>
>;
export type SaveFlowMutationBody = BodyType<SaveFlowRequest>;
export type SaveFlowMutationError = ErrorType<HTTPValidationError>;

/**
 * @summary Save a Flow
 */
export const useSaveFlow = <
  TError = ErrorType<HTTPValidationError>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof saveFlow>>,
      TError,
      { data: BodyType<SaveFlowRequest> },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof saveFlow>>,
  TError,
  { data: BodyType<SaveFlowRequest> },
  TContext
> => {
  const mutationOptions = getSaveFlowMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Get Flow details including code content.

Steps:
1. Find metadata in MongoDB
2. Read code from file
3. Return combined data
 * @summary Get Flow details
 */
export const getFlow = (
  name: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetFlowResponse>(
    { url: `/api/flow/${name}`, method: "GET", signal },
    options,
  );
};

export const getGetFlowQueryKey = (name?: string) => {
  return [`/api/flow/${name}`] as const;
};

export const getGetFlowQueryOptions = <
  TData = Awaited<ReturnType<typeof getFlow>>,
  TError = ErrorType<HTTPValidationError>,
>(
  name: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getFlow>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetFlowQueryKey(name);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getFlow>>> = ({
    signal,
  }) => getFlow(name, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!name,
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getFlow>>, TError, TData> & {
    queryKey: DataTag<QueryKey, TData>;
  };
};

export type GetFlowQueryResult = NonNullable<
  Awaited<ReturnType<typeof getFlow>>
>;
export type GetFlowQueryError = ErrorType<HTTPValidationError>;

export function useGetFlow<
  TData = Awaited<ReturnType<typeof getFlow>>,
  TError = ErrorType<HTTPValidationError>,
>(
  name: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getFlow>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFlow>>,
          TError,
          Awaited<ReturnType<typeof getFlow>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetFlow<
  TData = Awaited<ReturnType<typeof getFlow>>,
  TError = ErrorType<HTTPValidationError>,
>(
  name: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getFlow>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFlow>>,
          TError,
          Awaited<ReturnType<typeof getFlow>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetFlow<
  TData = Awaited<ReturnType<typeof getFlow>>,
  TError = ErrorType<HTTPValidationError>,
>(
  name: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getFlow>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Get Flow details
 */

export function useGetFlow<
  TData = Awaited<ReturnType<typeof getFlow>>,
  TError = ErrorType<HTTPValidationError>,
>(
  name: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getFlow>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetFlowQueryOptions(name, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Delete a Flow.

Steps:
1. Delete file from user_flows/{username}/{name}.py
2. Delete metadata from MongoDB
 * @summary Delete a Flow
 */
export const deleteFlow = (
  name: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<DeleteFlow200>(
    { url: `/api/flow/${name}`, method: "DELETE" },
    options,
  );
};

export const getDeleteFlowMutationOptions = <
  TError = ErrorType<HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteFlow>>,
    TError,
    { name: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteFlow>>,
  TError,
  { name: string },
  TContext
> => {
  const mutationKey = ["deleteFlow"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteFlow>>,
    { name: string }
  > = (props) => {
    const { name } = props ?? {};

    return deleteFlow(name, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteFlowMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteFlow>>
>;

export type DeleteFlowMutationError = ErrorType<HTTPValidationError>;

/**
 * @summary Delete a Flow
 */
export const useDeleteFlow = <
  TError = ErrorType<HTTPValidationError>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteFlow>>,
      TError,
      { name: string },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteFlow>>,
  TError,
  { name: string },
  TContext
> => {
  const mutationOptions = getDeleteFlowMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Execute a Flow via Prefect deployment.

Steps:
1. Find flow metadata in MongoDB
2. Merge request parameters with default_parameters
3. Create flow run via Prefect Client
4. Return execution_id and URLs
 * @summary Execute a Flow
 */
export const executeFlow = (
  name: string,
  executeFlowRequest: BodyType<ExecuteFlowRequest>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ExecuteFlowResponse>(
    {
      url: `/api/flow/${name}/execute`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: executeFlowRequest,
      signal,
    },
    options,
  );
};

export const getExecuteFlowMutationOptions = <
  TError = ErrorType<HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof executeFlow>>,
    TError,
    { name: string; data: BodyType<ExecuteFlowRequest> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof executeFlow>>,
  TError,
  { name: string; data: BodyType<ExecuteFlowRequest> },
  TContext
> => {
  const mutationKey = ["executeFlow"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof executeFlow>>,
    { name: string; data: BodyType<ExecuteFlowRequest> }
  > = (props) => {
    const { name, data } = props ?? {};

    return executeFlow(name, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ExecuteFlowMutationResult = NonNullable<
  Awaited<ReturnType<typeof executeFlow>>
>;
export type ExecuteFlowMutationBody = BodyType<ExecuteFlowRequest>;
export type ExecuteFlowMutationError = ErrorType<HTTPValidationError>;

/**
 * @summary Execute a Flow
 */
export const useExecuteFlow = <
  TError = ErrorType<HTTPValidationError>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof executeFlow>>,
      TError,
      { name: string; data: BodyType<ExecuteFlowRequest> },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof executeFlow>>,
  TError,
  { name: string; data: BodyType<ExecuteFlowRequest> },
  TContext
> => {
  const mutationOptions = getExecuteFlowMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * List all available flow templates.

Returns metadata only (no code content for performance).
 * @summary List Flow Templates
 */
export const listFlowTemplates = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<FlowTemplate[]>(
    { url: `/api/flow-templates`, method: "GET", signal },
    options,
  );
};

export const getListFlowTemplatesQueryKey = () => {
  return [`/api/flow-templates`] as const;
};

export const getListFlowTemplatesQueryOptions = <
  TData = Awaited<ReturnType<typeof listFlowTemplates>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof listFlowTemplates>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListFlowTemplatesQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof listFlowTemplates>>
  > = ({ signal }) => listFlowTemplates(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listFlowTemplates>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type ListFlowTemplatesQueryResult = NonNullable<
  Awaited<ReturnType<typeof listFlowTemplates>>
>;
export type ListFlowTemplatesQueryError = ErrorType<unknown>;

export function useListFlowTemplates<
  TData = Awaited<ReturnType<typeof listFlowTemplates>>,
  TError = ErrorType<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listFlowTemplates>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listFlowTemplates>>,
          TError,
          Awaited<ReturnType<typeof listFlowTemplates>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useListFlowTemplates<
  TData = Awaited<ReturnType<typeof listFlowTemplates>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listFlowTemplates>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listFlowTemplates>>,
          TError,
          Awaited<ReturnType<typeof listFlowTemplates>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useListFlowTemplates<
  TData = Awaited<ReturnType<typeof listFlowTemplates>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listFlowTemplates>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary List Flow Templates
 */

export function useListFlowTemplates<
  TData = Awaited<ReturnType<typeof listFlowTemplates>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listFlowTemplates>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getListFlowTemplatesQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get flow template details including code content.

Steps:
1. Find template metadata
2. Read Python file content
3. Return combined data
 * @summary Get Flow Template
 */
export const getFlowTemplate = (
  templateId: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<FlowTemplateWithCode>(
    { url: `/api/flow-templates/${templateId}`, method: "GET", signal },
    options,
  );
};

export const getGetFlowTemplateQueryKey = (templateId?: string) => {
  return [`/api/flow-templates/${templateId}`] as const;
};

export const getGetFlowTemplateQueryOptions = <
  TData = Awaited<ReturnType<typeof getFlowTemplate>>,
  TError = ErrorType<HTTPValidationError>,
>(
  templateId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getFlowTemplate>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetFlowTemplateQueryKey(templateId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getFlowTemplate>>> = ({
    signal,
  }) => getFlowTemplate(templateId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!templateId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getFlowTemplate>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetFlowTemplateQueryResult = NonNullable<
  Awaited<ReturnType<typeof getFlowTemplate>>
>;
export type GetFlowTemplateQueryError = ErrorType<HTTPValidationError>;

export function useGetFlowTemplate<
  TData = Awaited<ReturnType<typeof getFlowTemplate>>,
  TError = ErrorType<HTTPValidationError>,
>(
  templateId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getFlowTemplate>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFlowTemplate>>,
          TError,
          Awaited<ReturnType<typeof getFlowTemplate>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetFlowTemplate<
  TData = Awaited<ReturnType<typeof getFlowTemplate>>,
  TError = ErrorType<HTTPValidationError>,
>(
  templateId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getFlowTemplate>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFlowTemplate>>,
          TError,
          Awaited<ReturnType<typeof getFlowTemplate>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetFlowTemplate<
  TData = Awaited<ReturnType<typeof getFlowTemplate>>,
  TError = ErrorType<HTTPValidationError>,
>(
  templateId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getFlowTemplate>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Get Flow Template
 */

export function useGetFlowTemplate<
  TData = Awaited<ReturnType<typeof getFlowTemplate>>,
  TError = ErrorType<HTTPValidationError>,
>(
  templateId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getFlowTemplate>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetFlowTemplateQueryOptions(templateId, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
