/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * QDash Server
 * API for QDash
 * OpenAPI spec version: 0.0.1
 */
import { useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import axios from "axios";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";
import type { HTTPValidationError } from "../../schemas";

/**
 * Download a file.
 * @summary download file
 */
export const downloadFile = (
  filePath: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.get(`http://localhost:5715/${filePath}`, options);
};

export const getDownloadFileQueryKey = (filePath: string) => {
  return [`http://localhost:5715/${filePath}`] as const;
};

export const getDownloadFileQueryOptions = <
  TData = Awaited<ReturnType<typeof downloadFile>>,
  TError = AxiosError<HTTPValidationError>,
>(
  filePath: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof downloadFile>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getDownloadFileQueryKey(filePath);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof downloadFile>>> = ({
    signal,
  }) => downloadFile(filePath, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!filePath,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof downloadFile>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type DownloadFileQueryResult = NonNullable<
  Awaited<ReturnType<typeof downloadFile>>
>;
export type DownloadFileQueryError = AxiosError<HTTPValidationError>;

export function useDownloadFile<
  TData = Awaited<ReturnType<typeof downloadFile>>,
  TError = AxiosError<HTTPValidationError>,
>(
  filePath: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof downloadFile>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof downloadFile>>,
          TError,
          Awaited<ReturnType<typeof downloadFile>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useDownloadFile<
  TData = Awaited<ReturnType<typeof downloadFile>>,
  TError = AxiosError<HTTPValidationError>,
>(
  filePath: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof downloadFile>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof downloadFile>>,
          TError,
          Awaited<ReturnType<typeof downloadFile>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useDownloadFile<
  TData = Awaited<ReturnType<typeof downloadFile>>,
  TError = AxiosError<HTTPValidationError>,
>(
  filePath: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof downloadFile>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary download file
 */

export function useDownloadFile<
  TData = Awaited<ReturnType<typeof downloadFile>>,
  TError = AxiosError<HTTPValidationError>,
>(
  filePath: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof downloadFile>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getDownloadFileQueryOptions(filePath, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
