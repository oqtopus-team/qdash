/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * QDash Server
 * API for QDash
 * OpenAPI spec version: 0.0.1
 */
import { useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import axios from "axios";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";
import type {
  ExecutionResponseDetailV2,
  ExecutionResponseSummaryV2,
  HTTPValidationError,
} from "../../schemas";

/**
 * Fetch all executions.
 * @summary Fetch executions
 */
export const fetchExecutionsV2 = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ExecutionResponseSummaryV2[]>> => {
  return axios.get(`http://localhost:5715/v2/execution`, options);
};

export const getFetchExecutionsV2QueryKey = () => {
  return [`http://localhost:5715/v2/execution`] as const;
};

export const getFetchExecutionsV2QueryOptions = <
  TData = Awaited<ReturnType<typeof fetchExecutionsV2>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof fetchExecutionsV2>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getFetchExecutionsV2QueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof fetchExecutionsV2>>
  > = ({ signal }) => fetchExecutionsV2({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof fetchExecutionsV2>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type FetchExecutionsV2QueryResult = NonNullable<
  Awaited<ReturnType<typeof fetchExecutionsV2>>
>;
export type FetchExecutionsV2QueryError = AxiosError<unknown>;

export function useFetchExecutionsV2<
  TData = Awaited<ReturnType<typeof fetchExecutionsV2>>,
  TError = AxiosError<unknown>,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof fetchExecutionsV2>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof fetchExecutionsV2>>,
        TError,
        Awaited<ReturnType<typeof fetchExecutionsV2>>
      >,
      "initialData"
    >;
  axios?: AxiosRequestConfig;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useFetchExecutionsV2<
  TData = Awaited<ReturnType<typeof fetchExecutionsV2>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof fetchExecutionsV2>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof fetchExecutionsV2>>,
        TError,
        Awaited<ReturnType<typeof fetchExecutionsV2>>
      >,
      "initialData"
    >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useFetchExecutionsV2<
  TData = Awaited<ReturnType<typeof fetchExecutionsV2>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof fetchExecutionsV2>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Fetch executions
 */

export function useFetchExecutionsV2<
  TData = Awaited<ReturnType<typeof fetchExecutionsV2>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof fetchExecutionsV2>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getFetchExecutionsV2QueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Return the execution detail by its ID.
 * @summary Fetch an execution by its ID
 */
export const fetchExecutionByIdV2 = (
  executionId: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ExecutionResponseDetailV2>> => {
  return axios.get(
    `http://localhost:5715/v2/execution/${executionId}`,
    options,
  );
};

export const getFetchExecutionByIdV2QueryKey = (executionId: string) => {
  return [`http://localhost:5715/v2/execution/${executionId}`] as const;
};

export const getFetchExecutionByIdV2QueryOptions = <
  TData = Awaited<ReturnType<typeof fetchExecutionByIdV2>>,
  TError = AxiosError<HTTPValidationError>,
>(
  executionId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchExecutionByIdV2>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getFetchExecutionByIdV2QueryKey(executionId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof fetchExecutionByIdV2>>
  > = ({ signal }) =>
    fetchExecutionByIdV2(executionId, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!executionId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof fetchExecutionByIdV2>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type FetchExecutionByIdV2QueryResult = NonNullable<
  Awaited<ReturnType<typeof fetchExecutionByIdV2>>
>;
export type FetchExecutionByIdV2QueryError = AxiosError<HTTPValidationError>;

export function useFetchExecutionByIdV2<
  TData = Awaited<ReturnType<typeof fetchExecutionByIdV2>>,
  TError = AxiosError<HTTPValidationError>,
>(
  executionId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchExecutionByIdV2>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof fetchExecutionByIdV2>>,
          TError,
          Awaited<ReturnType<typeof fetchExecutionByIdV2>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useFetchExecutionByIdV2<
  TData = Awaited<ReturnType<typeof fetchExecutionByIdV2>>,
  TError = AxiosError<HTTPValidationError>,
>(
  executionId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchExecutionByIdV2>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof fetchExecutionByIdV2>>,
          TError,
          Awaited<ReturnType<typeof fetchExecutionByIdV2>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useFetchExecutionByIdV2<
  TData = Awaited<ReturnType<typeof fetchExecutionByIdV2>>,
  TError = AxiosError<HTTPValidationError>,
>(
  executionId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchExecutionByIdV2>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Fetch an execution by its ID
 */

export function useFetchExecutionByIdV2<
  TData = Awaited<ReturnType<typeof fetchExecutionByIdV2>>,
  TError = AxiosError<HTTPValidationError>,
>(
  executionId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchExecutionByIdV2>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getFetchExecutionByIdV2QueryOptions(
    executionId,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
