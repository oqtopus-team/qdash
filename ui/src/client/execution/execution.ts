/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * QDash API
 * API for QDash
 * OpenAPI spec version: 0.0.1
 */
import { useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import axios from "axios";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";

import type {
  Detail,
  ExecutionLockStatusResponse,
  FetchFigureByPathParams,
  HTTPValidationError,
} from "../../schemas";

/**
 * Fetch a calibration figure by its path.
 * @summary Fetches a calibration figure by its path
 */
export const fetchFigureByPath = (
  params: FetchFigureByPathParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.get(`http://localhost:5715/api/executions/figure`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getFetchFigureByPathQueryKey = (
  params: FetchFigureByPathParams,
) => {
  return [
    `http://localhost:5715/api/executions/figure`,
    ...(params ? [params] : []),
  ] as const;
};

export const getFetchFigureByPathQueryOptions = <
  TData = Awaited<ReturnType<typeof fetchFigureByPath>>,
  TError = AxiosError<Detail | HTTPValidationError>,
>(
  params: FetchFigureByPathParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchFigureByPath>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getFetchFigureByPathQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof fetchFigureByPath>>
  > = ({ signal }) => fetchFigureByPath(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof fetchFigureByPath>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type FetchFigureByPathQueryResult = NonNullable<
  Awaited<ReturnType<typeof fetchFigureByPath>>
>;
export type FetchFigureByPathQueryError = AxiosError<
  Detail | HTTPValidationError
>;

export function useFetchFigureByPath<
  TData = Awaited<ReturnType<typeof fetchFigureByPath>>,
  TError = AxiosError<Detail | HTTPValidationError>,
>(
  params: FetchFigureByPathParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchFigureByPath>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof fetchFigureByPath>>,
          TError,
          Awaited<ReturnType<typeof fetchFigureByPath>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useFetchFigureByPath<
  TData = Awaited<ReturnType<typeof fetchFigureByPath>>,
  TError = AxiosError<Detail | HTTPValidationError>,
>(
  params: FetchFigureByPathParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchFigureByPath>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof fetchFigureByPath>>,
          TError,
          Awaited<ReturnType<typeof fetchFigureByPath>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useFetchFigureByPath<
  TData = Awaited<ReturnType<typeof fetchFigureByPath>>,
  TError = AxiosError<Detail | HTTPValidationError>,
>(
  params: FetchFigureByPathParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchFigureByPath>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Fetches a calibration figure by its path
 */

export function useFetchFigureByPath<
  TData = Awaited<ReturnType<typeof fetchFigureByPath>>,
  TError = AxiosError<Detail | HTTPValidationError>,
>(
  params: FetchFigureByPathParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchFigureByPath>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getFetchFigureByPathQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Fetch the status of the execution lock.
 * @summary Fetches the status of a calibration.
 */
export const fetchExecutionLockStatus = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ExecutionLockStatusResponse>> => {
  return axios.get(`http://localhost:5715/api/executions/lock_status`, options);
};

export const getFetchExecutionLockStatusQueryKey = () => {
  return [`http://localhost:5715/api/executions/lock_status`] as const;
};

export const getFetchExecutionLockStatusQueryOptions = <
  TData = Awaited<ReturnType<typeof fetchExecutionLockStatus>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof fetchExecutionLockStatus>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getFetchExecutionLockStatusQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof fetchExecutionLockStatus>>
  > = ({ signal }) => fetchExecutionLockStatus({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof fetchExecutionLockStatus>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type FetchExecutionLockStatusQueryResult = NonNullable<
  Awaited<ReturnType<typeof fetchExecutionLockStatus>>
>;
export type FetchExecutionLockStatusQueryError = AxiosError<unknown>;

export function useFetchExecutionLockStatus<
  TData = Awaited<ReturnType<typeof fetchExecutionLockStatus>>,
  TError = AxiosError<unknown>,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof fetchExecutionLockStatus>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof fetchExecutionLockStatus>>,
        TError,
        Awaited<ReturnType<typeof fetchExecutionLockStatus>>
      >,
      "initialData"
    >;
  axios?: AxiosRequestConfig;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useFetchExecutionLockStatus<
  TData = Awaited<ReturnType<typeof fetchExecutionLockStatus>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof fetchExecutionLockStatus>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof fetchExecutionLockStatus>>,
        TError,
        Awaited<ReturnType<typeof fetchExecutionLockStatus>>
      >,
      "initialData"
    >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useFetchExecutionLockStatus<
  TData = Awaited<ReturnType<typeof fetchExecutionLockStatus>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof fetchExecutionLockStatus>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Fetches the status of a calibration.
 */

export function useFetchExecutionLockStatus<
  TData = Awaited<ReturnType<typeof fetchExecutionLockStatus>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof fetchExecutionLockStatus>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getFetchExecutionLockStatusQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
