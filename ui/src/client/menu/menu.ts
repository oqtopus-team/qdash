/**
 * Generated by orval v7.14.0 üç∫
 * Do not edit manually.
 * QDash API
 * API for QDash
 * OpenAPI spec version: 0.0.1
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  CreateMenuRequest,
  CreateMenuResponse,
  DeleteMenuResponse,
  Detail,
  GetMenuResponse,
  HTTPValidationError,
  ListMenuResponse,
  UpdateMenuRequest,
  UpdateMenuResponse,
} from "../../schemas";

import { customInstance } from "../../lib/custom-instance";
import type { ErrorType, BodyType } from "../../lib/custom-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Retrieve a list of menu items.

Returns
-------
    ListMenuResponse: A response containing the list of menu items.
 * @summary Retrieve a list of menu items.
 */
export const listMenu = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ListMenuResponse>(
    { url: `/api/menu`, method: "GET", signal },
    options,
  );
};

export const getListMenuQueryKey = () => {
  return [`/api/menu`] as const;
};

export const getListMenuQueryOptions = <
  TData = Awaited<ReturnType<typeof listMenu>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listMenu>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListMenuQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listMenu>>> = ({
    signal,
  }) => listMenu(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listMenu>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type ListMenuQueryResult = NonNullable<
  Awaited<ReturnType<typeof listMenu>>
>;
export type ListMenuQueryError = ErrorType<unknown>;

export function useListMenu<
  TData = Awaited<ReturnType<typeof listMenu>>,
  TError = ErrorType<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listMenu>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listMenu>>,
          TError,
          Awaited<ReturnType<typeof listMenu>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useListMenu<
  TData = Awaited<ReturnType<typeof listMenu>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listMenu>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listMenu>>,
          TError,
          Awaited<ReturnType<typeof listMenu>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useListMenu<
  TData = Awaited<ReturnType<typeof listMenu>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listMenu>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Retrieve a list of menu items.
 */

export function useListMenu<
  TData = Awaited<ReturnType<typeof listMenu>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listMenu>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getListMenuQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create a new menu item.

Args:
----
    request (CreateMenuRequest): The request object containing the menu item details.
    current_user (User): The current authenticated user.

Returns:
-------
    CreateMenuResponse: The response object containing the name of the created menu item.
 * @summary Create a new menu item.
 */
export const createMenu = (
  createMenuRequest: BodyType<CreateMenuRequest>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<CreateMenuResponse>(
    {
      url: `/api/menu`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createMenuRequest,
      signal,
    },
    options,
  );
};

export const getCreateMenuMutationOptions = <
  TError = ErrorType<HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createMenu>>,
    TError,
    { data: BodyType<CreateMenuRequest> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createMenu>>,
  TError,
  { data: BodyType<CreateMenuRequest> },
  TContext
> => {
  const mutationKey = ["createMenu"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createMenu>>,
    { data: BodyType<CreateMenuRequest> }
  > = (props) => {
    const { data } = props ?? {};

    return createMenu(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateMenuMutationResult = NonNullable<
  Awaited<ReturnType<typeof createMenu>>
>;
export type CreateMenuMutationBody = BodyType<CreateMenuRequest>;
export type CreateMenuMutationError = ErrorType<HTTPValidationError>;

/**
 * @summary Create a new menu item.
 */
export const useCreateMenu = <
  TError = ErrorType<HTTPValidationError>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createMenu>>,
      TError,
      { data: BodyType<CreateMenuRequest> },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createMenu>>,
  TError,
  { data: BodyType<CreateMenuRequest> },
  TContext
> => {
  const mutationOptions = getCreateMenuMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Retrieve a list of preset menu items.

Returns
-------
    ListMenuResponse: A response containing the list of preset menu items.
 * @summary Retrieve a list of preset menu items.
 */
export const listPreset = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ListMenuResponse>(
    { url: `/api/menu/preset`, method: "GET", signal },
    options,
  );
};

export const getListPresetQueryKey = () => {
  return [`/api/menu/preset`] as const;
};

export const getListPresetQueryOptions = <
  TData = Awaited<ReturnType<typeof listPreset>>,
  TError = ErrorType<Detail>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listPreset>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListPresetQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listPreset>>> = ({
    signal,
  }) => listPreset(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listPreset>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type ListPresetQueryResult = NonNullable<
  Awaited<ReturnType<typeof listPreset>>
>;
export type ListPresetQueryError = ErrorType<Detail>;

export function useListPreset<
  TData = Awaited<ReturnType<typeof listPreset>>,
  TError = ErrorType<Detail>,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listPreset>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listPreset>>,
          TError,
          Awaited<ReturnType<typeof listPreset>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useListPreset<
  TData = Awaited<ReturnType<typeof listPreset>>,
  TError = ErrorType<Detail>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listPreset>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listPreset>>,
          TError,
          Awaited<ReturnType<typeof listPreset>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useListPreset<
  TData = Awaited<ReturnType<typeof listPreset>>,
  TError = ErrorType<Detail>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listPreset>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Retrieve a list of preset menu items.
 */

export function useListPreset<
  TData = Awaited<ReturnType<typeof listPreset>>,
  TError = ErrorType<Detail>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listPreset>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getListPresetQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Retrieve a menu by its name.

Args:
----
    name (str): The name of the menu.
    current_user (User): The current authenticated user.

Returns:
-------
    GetMenuResponse: The response containing the menu details.

Raises:
------
    InternalServerError: If there is an error retrieving the menu.
    NotFoundErrorResponse: If the menu is not found.
 * @summary Retrieve a menu by its name.
 */
export const getMenuByName = (
  name: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetMenuResponse>(
    { url: `/api/menu/${name}`, method: "GET", signal },
    options,
  );
};

export const getGetMenuByNameQueryKey = (name?: string) => {
  return [`/api/menu/${name}`] as const;
};

export const getGetMenuByNameQueryOptions = <
  TData = Awaited<ReturnType<typeof getMenuByName>>,
  TError = ErrorType<Detail | HTTPValidationError>,
>(
  name: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getMenuByName>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetMenuByNameQueryKey(name);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getMenuByName>>> = ({
    signal,
  }) => getMenuByName(name, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!name,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getMenuByName>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetMenuByNameQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMenuByName>>
>;
export type GetMenuByNameQueryError = ErrorType<Detail | HTTPValidationError>;

export function useGetMenuByName<
  TData = Awaited<ReturnType<typeof getMenuByName>>,
  TError = ErrorType<Detail | HTTPValidationError>,
>(
  name: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getMenuByName>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMenuByName>>,
          TError,
          Awaited<ReturnType<typeof getMenuByName>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetMenuByName<
  TData = Awaited<ReturnType<typeof getMenuByName>>,
  TError = ErrorType<Detail | HTTPValidationError>,
>(
  name: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getMenuByName>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMenuByName>>,
          TError,
          Awaited<ReturnType<typeof getMenuByName>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetMenuByName<
  TData = Awaited<ReturnType<typeof getMenuByName>>,
  TError = ErrorType<Detail | HTTPValidationError>,
>(
  name: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getMenuByName>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Retrieve a menu by its name.
 */

export function useGetMenuByName<
  TData = Awaited<ReturnType<typeof getMenuByName>>,
  TError = ErrorType<Detail | HTTPValidationError>,
>(
  name: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getMenuByName>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetMenuByNameQueryOptions(name, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Update a menu with the given name.

Args:
----
    name (str): The name of the menu to update.
    req (UpdateMenuRequest): The request object containing the updated menu data.
    current_user (User): The current authenticated user.

Returns:
-------
    Union[UpdateMenuResponse, NotFoundErrorResponse]: The response object indicating the success of the update or an error if the menu is not found.
 * @summary Update a menu with the given name.
 */
export const updateMenu = (
  name: string,
  updateMenuRequest: BodyType<UpdateMenuRequest>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<UpdateMenuResponse>(
    {
      url: `/api/menu/${name}`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: updateMenuRequest,
    },
    options,
  );
};

export const getUpdateMenuMutationOptions = <
  TError = ErrorType<Detail | HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateMenu>>,
    TError,
    { name: string; data: BodyType<UpdateMenuRequest> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateMenu>>,
  TError,
  { name: string; data: BodyType<UpdateMenuRequest> },
  TContext
> => {
  const mutationKey = ["updateMenu"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateMenu>>,
    { name: string; data: BodyType<UpdateMenuRequest> }
  > = (props) => {
    const { name, data } = props ?? {};

    return updateMenu(name, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateMenuMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateMenu>>
>;
export type UpdateMenuMutationBody = BodyType<UpdateMenuRequest>;
export type UpdateMenuMutationError = ErrorType<Detail | HTTPValidationError>;

/**
 * @summary Update a menu with the given name.
 */
export const useUpdateMenu = <
  TError = ErrorType<Detail | HTTPValidationError>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateMenu>>,
      TError,
      { name: string; data: BodyType<UpdateMenuRequest> },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateMenu>>,
  TError,
  { name: string; data: BodyType<UpdateMenuRequest> },
  TContext
> => {
  const mutationOptions = getUpdateMenuMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Delete a menu by its name.

Args:
----
    name (str): The name of the menu to be deleted.
    current_user (User): The current authenticated user.

Returns:
-------
    DeleteMenuResponse | NotFoundErrorResponse: The response indicating the success or failure of the deletion.
 * @summary Delete a menu by its name.
 */
export const deleteMenu = (
  name: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<DeleteMenuResponse>(
    { url: `/api/menu/${name}`, method: "DELETE" },
    options,
  );
};

export const getDeleteMenuMutationOptions = <
  TError = ErrorType<Detail | HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteMenu>>,
    TError,
    { name: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteMenu>>,
  TError,
  { name: string },
  TContext
> => {
  const mutationKey = ["deleteMenu"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteMenu>>,
    { name: string }
  > = (props) => {
    const { name } = props ?? {};

    return deleteMenu(name, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteMenuMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteMenu>>
>;

export type DeleteMenuMutationError = ErrorType<Detail | HTTPValidationError>;

/**
 * @summary Delete a menu by its name.
 */
export const useDeleteMenu = <
  TError = ErrorType<Detail | HTTPValidationError>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteMenu>>,
      TError,
      { name: string },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteMenu>>,
  TError,
  { name: string },
  TContext
> => {
  const mutationOptions = getDeleteMenuMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
