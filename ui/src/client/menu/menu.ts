/**
 * Generated by orval v7.6.0 üç∫
 * Do not edit manually.
 * QDash Server
 * API for QDash
 * OpenAPI spec version: 0.0.1
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import axios from "axios";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";

import type {
  CreateMenuRequest,
  CreateMenuResponse,
  DeleteMenuResponse,
  Detail,
  GetMenuResponse,
  HTTPValidationError,
  ListMenuResponse,
  UpdateMenuRequest,
  UpdateMenuResponse,
} from "../../schemas";

/**
 * Retrieve a list of menu items.

Returns
-------
    ListMenuResponse: A response containing the list of menu items.
 * @summary Retrieve a list of menu items.
 */
export const listMenu = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ListMenuResponse>> => {
  return axios.get(`http://localhost:5715/menu`, options);
};

export const getListMenuQueryKey = () => {
  return [`http://localhost:5715/menu`] as const;
};

export const getListMenuQueryOptions = <
  TData = Awaited<ReturnType<typeof listMenu>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listMenu>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListMenuQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listMenu>>> = ({
    signal,
  }) => listMenu({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listMenu>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type ListMenuQueryResult = NonNullable<
  Awaited<ReturnType<typeof listMenu>>
>;
export type ListMenuQueryError = AxiosError<unknown>;

export function useListMenu<
  TData = Awaited<ReturnType<typeof listMenu>>,
  TError = AxiosError<unknown>,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listMenu>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof listMenu>>,
        TError,
        Awaited<ReturnType<typeof listMenu>>
      >,
      "initialData"
    >;
  axios?: AxiosRequestConfig;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useListMenu<
  TData = Awaited<ReturnType<typeof listMenu>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listMenu>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof listMenu>>,
        TError,
        Awaited<ReturnType<typeof listMenu>>
      >,
      "initialData"
    >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useListMenu<
  TData = Awaited<ReturnType<typeof listMenu>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listMenu>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Retrieve a list of menu items.
 */

export function useListMenu<
  TData = Awaited<ReturnType<typeof listMenu>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listMenu>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getListMenuQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create a new menu item.

Args:
----
    request (CreateMenuRequest): The request object containing the menu item details.
    current_user (User): The current authenticated user.

Returns:
-------
    CreateMenuResponse: The response object containing the name of the created menu item.
 * @summary Create a new menu item.
 */
export const createMenu = (
  createMenuRequest: CreateMenuRequest,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<CreateMenuResponse>> => {
  return axios.post(`http://localhost:5715/menu`, createMenuRequest, options);
};

export const getCreateMenuMutationOptions = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createMenu>>,
    TError,
    { data: CreateMenuRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createMenu>>,
  TError,
  { data: CreateMenuRequest },
  TContext
> => {
  const mutationKey = ["createMenu"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createMenu>>,
    { data: CreateMenuRequest }
  > = (props) => {
    const { data } = props ?? {};

    return createMenu(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateMenuMutationResult = NonNullable<
  Awaited<ReturnType<typeof createMenu>>
>;
export type CreateMenuMutationBody = CreateMenuRequest;
export type CreateMenuMutationError = AxiosError<HTTPValidationError>;

/**
 * @summary Create a new menu item.
 */
export const useCreateMenu = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createMenu>>,
    TError,
    { data: CreateMenuRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof createMenu>>,
  TError,
  { data: CreateMenuRequest },
  TContext
> => {
  const mutationOptions = getCreateMenuMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Delete a menu by its name.

Args:
----
    name (str): The name of the menu to be deleted.
    current_user (User): The current authenticated user.

Returns:
-------
    DeleteMenuResponse | NotFoundErrorResponse: The response indicating the success or failure of the deletion.
 * @summary Delete a menu by its name.
 */
export const deleteMenu = (
  name: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<DeleteMenuResponse>> => {
  return axios.delete(`http://localhost:5715/menu/${name}`, options);
};

export const getDeleteMenuMutationOptions = <
  TError = AxiosError<Detail | HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteMenu>>,
    TError,
    { name: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteMenu>>,
  TError,
  { name: string },
  TContext
> => {
  const mutationKey = ["deleteMenu"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteMenu>>,
    { name: string }
  > = (props) => {
    const { name } = props ?? {};

    return deleteMenu(name, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteMenuMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteMenu>>
>;

export type DeleteMenuMutationError = AxiosError<Detail | HTTPValidationError>;

/**
 * @summary Delete a menu by its name.
 */
export const useDeleteMenu = <
  TError = AxiosError<Detail | HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteMenu>>,
    TError,
    { name: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteMenu>>,
  TError,
  { name: string },
  TContext
> => {
  const mutationOptions = getDeleteMenuMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Update a menu with the given name.

Args:
----
    name (str): The name of the menu to update.
    req (UpdateMenuRequest): The request object containing the updated menu data.
    current_user (User): The current authenticated user.

Returns:
-------
    Union[UpdateMenuResponse, NotFoundErrorResponse]: The response object indicating the success of the update or an error if the menu is not found.
 * @summary Update a menu with the given name.
 */
export const updateMenu = (
  name: string,
  updateMenuRequest: UpdateMenuRequest,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<UpdateMenuResponse>> => {
  return axios.put(
    `http://localhost:5715/menu/${name}`,
    updateMenuRequest,
    options,
  );
};

export const getUpdateMenuMutationOptions = <
  TError = AxiosError<Detail | HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateMenu>>,
    TError,
    { name: string; data: UpdateMenuRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateMenu>>,
  TError,
  { name: string; data: UpdateMenuRequest },
  TContext
> => {
  const mutationKey = ["updateMenu"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateMenu>>,
    { name: string; data: UpdateMenuRequest }
  > = (props) => {
    const { name, data } = props ?? {};

    return updateMenu(name, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateMenuMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateMenu>>
>;
export type UpdateMenuMutationBody = UpdateMenuRequest;
export type UpdateMenuMutationError = AxiosError<Detail | HTTPValidationError>;

/**
 * @summary Update a menu with the given name.
 */
export const useUpdateMenu = <
  TError = AxiosError<Detail | HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateMenu>>,
    TError,
    { name: string; data: UpdateMenuRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateMenu>>,
  TError,
  { name: string; data: UpdateMenuRequest },
  TContext
> => {
  const mutationOptions = getUpdateMenuMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Retrieve a menu by its name.

Args:
----
    name (str): The name of the menu.
    current_user (User): The current authenticated user.

Returns:
-------
    GetMenuResponse: The response containing the menu details.

Raises:
------
    InternalServerError: If there is an error retrieving the menu.
    NotFoundErrorResponse: If the menu is not found.
 * @summary Retrieve a menu by its name.
 */
export const getMenuByName = (
  name: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetMenuResponse>> => {
  return axios.get(`http://localhost:5715/menu/${name}`, options);
};

export const getGetMenuByNameQueryKey = (name: string) => {
  return [`http://localhost:5715/menu/${name}`] as const;
};

export const getGetMenuByNameQueryOptions = <
  TData = Awaited<ReturnType<typeof getMenuByName>>,
  TError = AxiosError<Detail | HTTPValidationError>,
>(
  name: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getMenuByName>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetMenuByNameQueryKey(name);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getMenuByName>>> = ({
    signal,
  }) => getMenuByName(name, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!name,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getMenuByName>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetMenuByNameQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMenuByName>>
>;
export type GetMenuByNameQueryError = AxiosError<Detail | HTTPValidationError>;

export function useGetMenuByName<
  TData = Awaited<ReturnType<typeof getMenuByName>>,
  TError = AxiosError<Detail | HTTPValidationError>,
>(
  name: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getMenuByName>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMenuByName>>,
          TError,
          Awaited<ReturnType<typeof getMenuByName>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetMenuByName<
  TData = Awaited<ReturnType<typeof getMenuByName>>,
  TError = AxiosError<Detail | HTTPValidationError>,
>(
  name: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getMenuByName>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMenuByName>>,
          TError,
          Awaited<ReturnType<typeof getMenuByName>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetMenuByName<
  TData = Awaited<ReturnType<typeof getMenuByName>>,
  TError = AxiosError<Detail | HTTPValidationError>,
>(
  name: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getMenuByName>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Retrieve a menu by its name.
 */

export function useGetMenuByName<
  TData = Awaited<ReturnType<typeof getMenuByName>>,
  TError = AxiosError<Detail | HTTPValidationError>,
>(
  name: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getMenuByName>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetMenuByNameQueryOptions(name, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
