/**
 * Generated by orval v7.6.0 üç∫
 * Do not edit manually.
 * QDash Server
 * API for QDash
 * OpenAPI spec version: 0.0.1
 */
import { useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import axios from "axios";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";

import type {
  Detail,
  ExecutionRunResponse,
  FetchOneQubitCalibByLabelParams,
  FetchOneQubitCalibByQpuNameParams,
  FetchOneQubitCalibHistoryByParamNameParams,
  FetchQpuFigureByPathParams,
  HTTPValidationError,
  MetricsResponse,
  OneQubitCalibResponse,
  ParamResponse,
  QPUInfoResponse,
  QPUStatsResponse,
  TwoQubitCalibResponse,
} from "../../schemas";

/**
 * @summary Fetches a calibration figure by its path
 */
export const fetchQpuFigureByPath = (
  params: FetchQpuFigureByPathParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.get(`http://localhost:5715/qpu/figure`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getFetchQpuFigureByPathQueryKey = (
  params: FetchQpuFigureByPathParams,
) => {
  return [
    `http://localhost:5715/qpu/figure`,
    ...(params ? [params] : []),
  ] as const;
};

export const getFetchQpuFigureByPathQueryOptions = <
  TData = Awaited<ReturnType<typeof fetchQpuFigureByPath>>,
  TError = AxiosError<Detail | HTTPValidationError>,
>(
  params: FetchQpuFigureByPathParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchQpuFigureByPath>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getFetchQpuFigureByPathQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof fetchQpuFigureByPath>>
  > = ({ signal }) => fetchQpuFigureByPath(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof fetchQpuFigureByPath>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type FetchQpuFigureByPathQueryResult = NonNullable<
  Awaited<ReturnType<typeof fetchQpuFigureByPath>>
>;
export type FetchQpuFigureByPathQueryError = AxiosError<
  Detail | HTTPValidationError
>;

export function useFetchQpuFigureByPath<
  TData = Awaited<ReturnType<typeof fetchQpuFigureByPath>>,
  TError = AxiosError<Detail | HTTPValidationError>,
>(
  params: FetchQpuFigureByPathParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchQpuFigureByPath>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof fetchQpuFigureByPath>>,
          TError,
          Awaited<ReturnType<typeof fetchQpuFigureByPath>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useFetchQpuFigureByPath<
  TData = Awaited<ReturnType<typeof fetchQpuFigureByPath>>,
  TError = AxiosError<Detail | HTTPValidationError>,
>(
  params: FetchQpuFigureByPathParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchQpuFigureByPath>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof fetchQpuFigureByPath>>,
          TError,
          Awaited<ReturnType<typeof fetchQpuFigureByPath>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useFetchQpuFigureByPath<
  TData = Awaited<ReturnType<typeof fetchQpuFigureByPath>>,
  TError = AxiosError<Detail | HTTPValidationError>,
>(
  params: FetchQpuFigureByPathParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchQpuFigureByPath>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Fetches a calibration figure by its path
 */

export function useFetchQpuFigureByPath<
  TData = Awaited<ReturnType<typeof fetchQpuFigureByPath>>,
  TError = AxiosError<Detail | HTTPValidationError>,
>(
  params: FetchQpuFigureByPathParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchQpuFigureByPath>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getFetchQpuFigureByPathQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Fetchqpuinfo
 */
export const fetchQpuInfo = (
  name: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<QPUInfoResponse>> => {
  return axios.get(`http://localhost:5715/qpu/info/${name}`, options);
};

export const getFetchQpuInfoQueryKey = (name: string) => {
  return [`http://localhost:5715/qpu/info/${name}`] as const;
};

export const getFetchQpuInfoQueryOptions = <
  TData = Awaited<ReturnType<typeof fetchQpuInfo>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof fetchQpuInfo>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getFetchQpuInfoQueryKey(name);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof fetchQpuInfo>>> = ({
    signal,
  }) => fetchQpuInfo(name, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!name,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof fetchQpuInfo>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type FetchQpuInfoQueryResult = NonNullable<
  Awaited<ReturnType<typeof fetchQpuInfo>>
>;
export type FetchQpuInfoQueryError = AxiosError<HTTPValidationError>;

export function useFetchQpuInfo<
  TData = Awaited<ReturnType<typeof fetchQpuInfo>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof fetchQpuInfo>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof fetchQpuInfo>>,
          TError,
          Awaited<ReturnType<typeof fetchQpuInfo>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useFetchQpuInfo<
  TData = Awaited<ReturnType<typeof fetchQpuInfo>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof fetchQpuInfo>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof fetchQpuInfo>>,
          TError,
          Awaited<ReturnType<typeof fetchQpuInfo>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useFetchQpuInfo<
  TData = Awaited<ReturnType<typeof fetchQpuInfo>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof fetchQpuInfo>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Fetchqpuinfo
 */

export function useFetchQpuInfo<
  TData = Awaited<ReturnType<typeof fetchQpuInfo>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof fetchQpuInfo>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getFetchQpuInfoQueryOptions(name, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary List Qpu
 */
export const listQpu = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<QPUInfoResponse[]>> => {
  return axios.get(`http://localhost:5715/qpu`, options);
};

export const getListQpuQueryKey = () => {
  return [`http://localhost:5715/qpu`] as const;
};

export const getListQpuQueryOptions = <
  TData = Awaited<ReturnType<typeof listQpu>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listQpu>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListQpuQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listQpu>>> = ({
    signal,
  }) => listQpu({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listQpu>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type ListQpuQueryResult = NonNullable<
  Awaited<ReturnType<typeof listQpu>>
>;
export type ListQpuQueryError = AxiosError<unknown>;

export function useListQpu<
  TData = Awaited<ReturnType<typeof listQpu>>,
  TError = AxiosError<unknown>,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listQpu>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof listQpu>>,
        TError,
        Awaited<ReturnType<typeof listQpu>>
      >,
      "initialData"
    >;
  axios?: AxiosRequestConfig;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useListQpu<
  TData = Awaited<ReturnType<typeof listQpu>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listQpu>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof listQpu>>,
        TError,
        Awaited<ReturnType<typeof listQpu>>
      >,
      "initialData"
    >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useListQpu<
  TData = Awaited<ReturnType<typeof listQpu>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listQpu>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary List Qpu
 */

export function useListQpu<
  TData = Awaited<ReturnType<typeof listQpu>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listQpu>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getListQpuQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Fetch Active Qpu
 */
export const fetchActiveQpu = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<QPUInfoResponse>> => {
  return axios.get(`http://localhost:5715/qpu/active`, options);
};

export const getFetchActiveQpuQueryKey = () => {
  return [`http://localhost:5715/qpu/active`] as const;
};

export const getFetchActiveQpuQueryOptions = <
  TData = Awaited<ReturnType<typeof fetchActiveQpu>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof fetchActiveQpu>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getFetchActiveQpuQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof fetchActiveQpu>>> = ({
    signal,
  }) => fetchActiveQpu({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof fetchActiveQpu>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type FetchActiveQpuQueryResult = NonNullable<
  Awaited<ReturnType<typeof fetchActiveQpu>>
>;
export type FetchActiveQpuQueryError = AxiosError<unknown>;

export function useFetchActiveQpu<
  TData = Awaited<ReturnType<typeof fetchActiveQpu>>,
  TError = AxiosError<unknown>,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof fetchActiveQpu>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof fetchActiveQpu>>,
        TError,
        Awaited<ReturnType<typeof fetchActiveQpu>>
      >,
      "initialData"
    >;
  axios?: AxiosRequestConfig;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useFetchActiveQpu<
  TData = Awaited<ReturnType<typeof fetchActiveQpu>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof fetchActiveQpu>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof fetchActiveQpu>>,
        TError,
        Awaited<ReturnType<typeof fetchActiveQpu>>
      >,
      "initialData"
    >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useFetchActiveQpu<
  TData = Awaited<ReturnType<typeof fetchActiveQpu>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof fetchActiveQpu>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Fetch Active Qpu
 */

export function useFetchActiveQpu<
  TData = Awaited<ReturnType<typeof fetchActiveQpu>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof fetchActiveQpu>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getFetchActiveQpuQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Fetch Qpu By Name
 */
export const fetchQpu = (
  name: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<QPUInfoResponse>> => {
  return axios.get(`http://localhost:5715/qpu/${name}`, options);
};

export const getFetchQpuQueryKey = (name: string) => {
  return [`http://localhost:5715/qpu/${name}`] as const;
};

export const getFetchQpuQueryOptions = <
  TData = Awaited<ReturnType<typeof fetchQpu>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof fetchQpu>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getFetchQpuQueryKey(name);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof fetchQpu>>> = ({
    signal,
  }) => fetchQpu(name, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!name,
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof fetchQpu>>, TError, TData> & {
    queryKey: DataTag<QueryKey, TData>;
  };
};

export type FetchQpuQueryResult = NonNullable<
  Awaited<ReturnType<typeof fetchQpu>>
>;
export type FetchQpuQueryError = AxiosError<HTTPValidationError>;

export function useFetchQpu<
  TData = Awaited<ReturnType<typeof fetchQpu>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof fetchQpu>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof fetchQpu>>,
          TError,
          Awaited<ReturnType<typeof fetchQpu>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useFetchQpu<
  TData = Awaited<ReturnType<typeof fetchQpu>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof fetchQpu>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof fetchQpu>>,
          TError,
          Awaited<ReturnType<typeof fetchQpu>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useFetchQpu<
  TData = Awaited<ReturnType<typeof fetchQpu>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof fetchQpu>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Fetch Qpu By Name
 */

export function useFetchQpu<
  TData = Awaited<ReturnType<typeof fetchQpu>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof fetchQpu>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getFetchQpuQueryOptions(name, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Fetch all executions
 */
export const fetchAllExecutionsByQpuName = (
  name: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ExecutionRunResponse[]>> => {
  return axios.get(`http://localhost:5715/qpu/${name}/executions`, options);
};

export const getFetchAllExecutionsByQpuNameQueryKey = (name: string) => {
  return [`http://localhost:5715/qpu/${name}/executions`] as const;
};

export const getFetchAllExecutionsByQpuNameQueryOptions = <
  TData = Awaited<ReturnType<typeof fetchAllExecutionsByQpuName>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchAllExecutionsByQpuName>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getFetchAllExecutionsByQpuNameQueryKey(name);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof fetchAllExecutionsByQpuName>>
  > = ({ signal }) =>
    fetchAllExecutionsByQpuName(name, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!name,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof fetchAllExecutionsByQpuName>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type FetchAllExecutionsByQpuNameQueryResult = NonNullable<
  Awaited<ReturnType<typeof fetchAllExecutionsByQpuName>>
>;
export type FetchAllExecutionsByQpuNameQueryError =
  AxiosError<HTTPValidationError>;

export function useFetchAllExecutionsByQpuName<
  TData = Awaited<ReturnType<typeof fetchAllExecutionsByQpuName>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchAllExecutionsByQpuName>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof fetchAllExecutionsByQpuName>>,
          TError,
          Awaited<ReturnType<typeof fetchAllExecutionsByQpuName>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useFetchAllExecutionsByQpuName<
  TData = Awaited<ReturnType<typeof fetchAllExecutionsByQpuName>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchAllExecutionsByQpuName>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof fetchAllExecutionsByQpuName>>,
          TError,
          Awaited<ReturnType<typeof fetchAllExecutionsByQpuName>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useFetchAllExecutionsByQpuName<
  TData = Awaited<ReturnType<typeof fetchAllExecutionsByQpuName>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchAllExecutionsByQpuName>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Fetch all executions
 */

export function useFetchAllExecutionsByQpuName<
  TData = Awaited<ReturnType<typeof fetchAllExecutionsByQpuName>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchAllExecutionsByQpuName>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getFetchAllExecutionsByQpuNameQueryOptions(
    name,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Fetch One Qubit Calib By Qpu Name
 */
export const fetchOneQubitCalibByQpuName = (
  name: string,
  params?: FetchOneQubitCalibByQpuNameParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<OneQubitCalibResponse[]>> => {
  return axios.get(`http://localhost:5715/qpu/${name}/one_qubit_calib/nodes`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getFetchOneQubitCalibByQpuNameQueryKey = (
  name: string,
  params?: FetchOneQubitCalibByQpuNameParams,
) => {
  return [
    `http://localhost:5715/qpu/${name}/one_qubit_calib/nodes`,
    ...(params ? [params] : []),
  ] as const;
};

export const getFetchOneQubitCalibByQpuNameQueryOptions = <
  TData = Awaited<ReturnType<typeof fetchOneQubitCalibByQpuName>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  params?: FetchOneQubitCalibByQpuNameParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchOneQubitCalibByQpuName>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getFetchOneQubitCalibByQpuNameQueryKey(name, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof fetchOneQubitCalibByQpuName>>
  > = ({ signal }) =>
    fetchOneQubitCalibByQpuName(name, params, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!name,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof fetchOneQubitCalibByQpuName>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type FetchOneQubitCalibByQpuNameQueryResult = NonNullable<
  Awaited<ReturnType<typeof fetchOneQubitCalibByQpuName>>
>;
export type FetchOneQubitCalibByQpuNameQueryError =
  AxiosError<HTTPValidationError>;

export function useFetchOneQubitCalibByQpuName<
  TData = Awaited<ReturnType<typeof fetchOneQubitCalibByQpuName>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  params: undefined | FetchOneQubitCalibByQpuNameParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchOneQubitCalibByQpuName>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof fetchOneQubitCalibByQpuName>>,
          TError,
          Awaited<ReturnType<typeof fetchOneQubitCalibByQpuName>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useFetchOneQubitCalibByQpuName<
  TData = Awaited<ReturnType<typeof fetchOneQubitCalibByQpuName>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  params?: FetchOneQubitCalibByQpuNameParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchOneQubitCalibByQpuName>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof fetchOneQubitCalibByQpuName>>,
          TError,
          Awaited<ReturnType<typeof fetchOneQubitCalibByQpuName>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useFetchOneQubitCalibByQpuName<
  TData = Awaited<ReturnType<typeof fetchOneQubitCalibByQpuName>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  params?: FetchOneQubitCalibByQpuNameParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchOneQubitCalibByQpuName>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Fetch One Qubit Calib By Qpu Name
 */

export function useFetchOneQubitCalibByQpuName<
  TData = Awaited<ReturnType<typeof fetchOneQubitCalibByQpuName>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  params?: FetchOneQubitCalibByQpuNameParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchOneQubitCalibByQpuName>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getFetchOneQubitCalibByQpuNameQueryOptions(
    name,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Fetch One Qubit Calib By Label
 */
export const fetchOneQubitCalibByLabel = (
  name: string,
  label: string,
  params?: FetchOneQubitCalibByLabelParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<OneQubitCalibResponse>> => {
  return axios.get(
    `http://localhost:5715/qpu/${name}/one_qubit_calib/nodes/${label}`,
    {
      ...options,
      params: { ...params, ...options?.params },
    },
  );
};

export const getFetchOneQubitCalibByLabelQueryKey = (
  name: string,
  label: string,
  params?: FetchOneQubitCalibByLabelParams,
) => {
  return [
    `http://localhost:5715/qpu/${name}/one_qubit_calib/nodes/${label}`,
    ...(params ? [params] : []),
  ] as const;
};

export const getFetchOneQubitCalibByLabelQueryOptions = <
  TData = Awaited<ReturnType<typeof fetchOneQubitCalibByLabel>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  label: string,
  params?: FetchOneQubitCalibByLabelParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchOneQubitCalibByLabel>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getFetchOneQubitCalibByLabelQueryKey(name, label, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof fetchOneQubitCalibByLabel>>
  > = ({ signal }) =>
    fetchOneQubitCalibByLabel(name, label, params, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!(name && label),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof fetchOneQubitCalibByLabel>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type FetchOneQubitCalibByLabelQueryResult = NonNullable<
  Awaited<ReturnType<typeof fetchOneQubitCalibByLabel>>
>;
export type FetchOneQubitCalibByLabelQueryError =
  AxiosError<HTTPValidationError>;

export function useFetchOneQubitCalibByLabel<
  TData = Awaited<ReturnType<typeof fetchOneQubitCalibByLabel>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  label: string,
  params: undefined | FetchOneQubitCalibByLabelParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchOneQubitCalibByLabel>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof fetchOneQubitCalibByLabel>>,
          TError,
          Awaited<ReturnType<typeof fetchOneQubitCalibByLabel>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useFetchOneQubitCalibByLabel<
  TData = Awaited<ReturnType<typeof fetchOneQubitCalibByLabel>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  label: string,
  params?: FetchOneQubitCalibByLabelParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchOneQubitCalibByLabel>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof fetchOneQubitCalibByLabel>>,
          TError,
          Awaited<ReturnType<typeof fetchOneQubitCalibByLabel>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useFetchOneQubitCalibByLabel<
  TData = Awaited<ReturnType<typeof fetchOneQubitCalibByLabel>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  label: string,
  params?: FetchOneQubitCalibByLabelParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchOneQubitCalibByLabel>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Fetch One Qubit Calib By Label
 */

export function useFetchOneQubitCalibByLabel<
  TData = Awaited<ReturnType<typeof fetchOneQubitCalibByLabel>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  label: string,
  params?: FetchOneQubitCalibByLabelParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchOneQubitCalibByLabel>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getFetchOneQubitCalibByLabelQueryOptions(
    name,
    label,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Fetch One Qubit Calib By Param Name
 */
export const fetchOneQubitCalibByParamName = (
  name: string,
  paramName: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ParamResponse>> => {
  return axios.get(
    `http://localhost:5715/qpu/${name}/one_qubit_calib/params/${paramName}`,
    options,
  );
};

export const getFetchOneQubitCalibByParamNameQueryKey = (
  name: string,
  paramName: string,
) => {
  return [
    `http://localhost:5715/qpu/${name}/one_qubit_calib/params/${paramName}`,
  ] as const;
};

export const getFetchOneQubitCalibByParamNameQueryOptions = <
  TData = Awaited<ReturnType<typeof fetchOneQubitCalibByParamName>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  paramName: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchOneQubitCalibByParamName>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getFetchOneQubitCalibByParamNameQueryKey(name, paramName);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof fetchOneQubitCalibByParamName>>
  > = ({ signal }) =>
    fetchOneQubitCalibByParamName(name, paramName, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!(name && paramName),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof fetchOneQubitCalibByParamName>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type FetchOneQubitCalibByParamNameQueryResult = NonNullable<
  Awaited<ReturnType<typeof fetchOneQubitCalibByParamName>>
>;
export type FetchOneQubitCalibByParamNameQueryError =
  AxiosError<HTTPValidationError>;

export function useFetchOneQubitCalibByParamName<
  TData = Awaited<ReturnType<typeof fetchOneQubitCalibByParamName>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  paramName: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchOneQubitCalibByParamName>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof fetchOneQubitCalibByParamName>>,
          TError,
          Awaited<ReturnType<typeof fetchOneQubitCalibByParamName>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useFetchOneQubitCalibByParamName<
  TData = Awaited<ReturnType<typeof fetchOneQubitCalibByParamName>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  paramName: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchOneQubitCalibByParamName>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof fetchOneQubitCalibByParamName>>,
          TError,
          Awaited<ReturnType<typeof fetchOneQubitCalibByParamName>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useFetchOneQubitCalibByParamName<
  TData = Awaited<ReturnType<typeof fetchOneQubitCalibByParamName>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  paramName: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchOneQubitCalibByParamName>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Fetch One Qubit Calib By Param Name
 */

export function useFetchOneQubitCalibByParamName<
  TData = Awaited<ReturnType<typeof fetchOneQubitCalibByParamName>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  paramName: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchOneQubitCalibByParamName>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getFetchOneQubitCalibByParamNameQueryOptions(
    name,
    paramName,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Fetch One Qubit Calib History By Param Name
 */
export const fetchOneQubitCalibHistoryByParamName = (
  name: string,
  paramName: string,
  params?: FetchOneQubitCalibHistoryByParamNameParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<MetricsResponse>> => {
  return axios.get(
    `http://localhost:5715/qpu/${name}/history/one_qubit_calib/${paramName}`,
    {
      ...options,
      params: { ...params, ...options?.params },
    },
  );
};

export const getFetchOneQubitCalibHistoryByParamNameQueryKey = (
  name: string,
  paramName: string,
  params?: FetchOneQubitCalibHistoryByParamNameParams,
) => {
  return [
    `http://localhost:5715/qpu/${name}/history/one_qubit_calib/${paramName}`,
    ...(params ? [params] : []),
  ] as const;
};

export const getFetchOneQubitCalibHistoryByParamNameQueryOptions = <
  TData = Awaited<ReturnType<typeof fetchOneQubitCalibHistoryByParamName>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  paramName: string,
  params?: FetchOneQubitCalibHistoryByParamNameParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchOneQubitCalibHistoryByParamName>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getFetchOneQubitCalibHistoryByParamNameQueryKey(name, paramName, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof fetchOneQubitCalibHistoryByParamName>>
  > = ({ signal }) =>
    fetchOneQubitCalibHistoryByParamName(name, paramName, params, {
      signal,
      ...axiosOptions,
    });

  return {
    queryKey,
    queryFn,
    enabled: !!(name && paramName),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof fetchOneQubitCalibHistoryByParamName>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type FetchOneQubitCalibHistoryByParamNameQueryResult = NonNullable<
  Awaited<ReturnType<typeof fetchOneQubitCalibHistoryByParamName>>
>;
export type FetchOneQubitCalibHistoryByParamNameQueryError =
  AxiosError<HTTPValidationError>;

export function useFetchOneQubitCalibHistoryByParamName<
  TData = Awaited<ReturnType<typeof fetchOneQubitCalibHistoryByParamName>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  paramName: string,
  params: undefined | FetchOneQubitCalibHistoryByParamNameParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchOneQubitCalibHistoryByParamName>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof fetchOneQubitCalibHistoryByParamName>>,
          TError,
          Awaited<ReturnType<typeof fetchOneQubitCalibHistoryByParamName>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useFetchOneQubitCalibHistoryByParamName<
  TData = Awaited<ReturnType<typeof fetchOneQubitCalibHistoryByParamName>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  paramName: string,
  params?: FetchOneQubitCalibHistoryByParamNameParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchOneQubitCalibHistoryByParamName>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof fetchOneQubitCalibHistoryByParamName>>,
          TError,
          Awaited<ReturnType<typeof fetchOneQubitCalibHistoryByParamName>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useFetchOneQubitCalibHistoryByParamName<
  TData = Awaited<ReturnType<typeof fetchOneQubitCalibHistoryByParamName>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  paramName: string,
  params?: FetchOneQubitCalibHistoryByParamNameParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchOneQubitCalibHistoryByParamName>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Fetch One Qubit Calib History By Param Name
 */

export function useFetchOneQubitCalibHistoryByParamName<
  TData = Awaited<ReturnType<typeof fetchOneQubitCalibHistoryByParamName>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  paramName: string,
  params?: FetchOneQubitCalibHistoryByParamNameParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchOneQubitCalibHistoryByParamName>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getFetchOneQubitCalibHistoryByParamNameQueryOptions(
    name,
    paramName,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Fetch Two Qubit Calib By Qpu Name
 */
export const fetchTwoQubitCalibByQpuName = (
  name: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<TwoQubitCalibResponse[]>> => {
  return axios.get(
    `http://localhost:5715/qpu/${name}/two_qubit_calib/edges`,
    options,
  );
};

export const getFetchTwoQubitCalibByQpuNameQueryKey = (name: string) => {
  return [`http://localhost:5715/qpu/${name}/two_qubit_calib/edges`] as const;
};

export const getFetchTwoQubitCalibByQpuNameQueryOptions = <
  TData = Awaited<ReturnType<typeof fetchTwoQubitCalibByQpuName>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchTwoQubitCalibByQpuName>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getFetchTwoQubitCalibByQpuNameQueryKey(name);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof fetchTwoQubitCalibByQpuName>>
  > = ({ signal }) =>
    fetchTwoQubitCalibByQpuName(name, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!name,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof fetchTwoQubitCalibByQpuName>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type FetchTwoQubitCalibByQpuNameQueryResult = NonNullable<
  Awaited<ReturnType<typeof fetchTwoQubitCalibByQpuName>>
>;
export type FetchTwoQubitCalibByQpuNameQueryError =
  AxiosError<HTTPValidationError>;

export function useFetchTwoQubitCalibByQpuName<
  TData = Awaited<ReturnType<typeof fetchTwoQubitCalibByQpuName>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchTwoQubitCalibByQpuName>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof fetchTwoQubitCalibByQpuName>>,
          TError,
          Awaited<ReturnType<typeof fetchTwoQubitCalibByQpuName>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useFetchTwoQubitCalibByQpuName<
  TData = Awaited<ReturnType<typeof fetchTwoQubitCalibByQpuName>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchTwoQubitCalibByQpuName>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof fetchTwoQubitCalibByQpuName>>,
          TError,
          Awaited<ReturnType<typeof fetchTwoQubitCalibByQpuName>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useFetchTwoQubitCalibByQpuName<
  TData = Awaited<ReturnType<typeof fetchTwoQubitCalibByQpuName>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchTwoQubitCalibByQpuName>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Fetch Two Qubit Calib By Qpu Name
 */

export function useFetchTwoQubitCalibByQpuName<
  TData = Awaited<ReturnType<typeof fetchTwoQubitCalibByQpuName>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchTwoQubitCalibByQpuName>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getFetchTwoQubitCalibByQpuNameQueryOptions(
    name,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Fetch Two Qubit Calib By Label
 */
export const fetchTwoQubitCalibByLabel = (
  name: string,
  label: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<TwoQubitCalibResponse>> => {
  return axios.get(
    `http://localhost:5715/qpu/${name}/two_qubit_calib/edges/${label}`,
    options,
  );
};

export const getFetchTwoQubitCalibByLabelQueryKey = (
  name: string,
  label: string,
) => {
  return [
    `http://localhost:5715/qpu/${name}/two_qubit_calib/edges/${label}`,
  ] as const;
};

export const getFetchTwoQubitCalibByLabelQueryOptions = <
  TData = Awaited<ReturnType<typeof fetchTwoQubitCalibByLabel>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  label: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchTwoQubitCalibByLabel>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getFetchTwoQubitCalibByLabelQueryKey(name, label);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof fetchTwoQubitCalibByLabel>>
  > = ({ signal }) =>
    fetchTwoQubitCalibByLabel(name, label, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!(name && label),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof fetchTwoQubitCalibByLabel>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type FetchTwoQubitCalibByLabelQueryResult = NonNullable<
  Awaited<ReturnType<typeof fetchTwoQubitCalibByLabel>>
>;
export type FetchTwoQubitCalibByLabelQueryError =
  AxiosError<HTTPValidationError>;

export function useFetchTwoQubitCalibByLabel<
  TData = Awaited<ReturnType<typeof fetchTwoQubitCalibByLabel>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  label: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchTwoQubitCalibByLabel>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof fetchTwoQubitCalibByLabel>>,
          TError,
          Awaited<ReturnType<typeof fetchTwoQubitCalibByLabel>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useFetchTwoQubitCalibByLabel<
  TData = Awaited<ReturnType<typeof fetchTwoQubitCalibByLabel>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  label: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchTwoQubitCalibByLabel>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof fetchTwoQubitCalibByLabel>>,
          TError,
          Awaited<ReturnType<typeof fetchTwoQubitCalibByLabel>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useFetchTwoQubitCalibByLabel<
  TData = Awaited<ReturnType<typeof fetchTwoQubitCalibByLabel>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  label: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchTwoQubitCalibByLabel>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Fetch Two Qubit Calib By Label
 */

export function useFetchTwoQubitCalibByLabel<
  TData = Awaited<ReturnType<typeof fetchTwoQubitCalibByLabel>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  label: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchTwoQubitCalibByLabel>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getFetchTwoQubitCalibByLabelQueryOptions(
    name,
    label,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Fetch Two Qubit Calib By Param Name
 */
export const fetchTwoQubitCalibByParamName = (
  name: string,
  paramName: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ParamResponse>> => {
  return axios.get(
    `http://localhost:5715/qpu/${name}/two_qubit_calib/params/${paramName}`,
    options,
  );
};

export const getFetchTwoQubitCalibByParamNameQueryKey = (
  name: string,
  paramName: string,
) => {
  return [
    `http://localhost:5715/qpu/${name}/two_qubit_calib/params/${paramName}`,
  ] as const;
};

export const getFetchTwoQubitCalibByParamNameQueryOptions = <
  TData = Awaited<ReturnType<typeof fetchTwoQubitCalibByParamName>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  paramName: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchTwoQubitCalibByParamName>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getFetchTwoQubitCalibByParamNameQueryKey(name, paramName);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof fetchTwoQubitCalibByParamName>>
  > = ({ signal }) =>
    fetchTwoQubitCalibByParamName(name, paramName, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!(name && paramName),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof fetchTwoQubitCalibByParamName>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type FetchTwoQubitCalibByParamNameQueryResult = NonNullable<
  Awaited<ReturnType<typeof fetchTwoQubitCalibByParamName>>
>;
export type FetchTwoQubitCalibByParamNameQueryError =
  AxiosError<HTTPValidationError>;

export function useFetchTwoQubitCalibByParamName<
  TData = Awaited<ReturnType<typeof fetchTwoQubitCalibByParamName>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  paramName: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchTwoQubitCalibByParamName>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof fetchTwoQubitCalibByParamName>>,
          TError,
          Awaited<ReturnType<typeof fetchTwoQubitCalibByParamName>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useFetchTwoQubitCalibByParamName<
  TData = Awaited<ReturnType<typeof fetchTwoQubitCalibByParamName>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  paramName: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchTwoQubitCalibByParamName>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof fetchTwoQubitCalibByParamName>>,
          TError,
          Awaited<ReturnType<typeof fetchTwoQubitCalibByParamName>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useFetchTwoQubitCalibByParamName<
  TData = Awaited<ReturnType<typeof fetchTwoQubitCalibByParamName>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  paramName: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchTwoQubitCalibByParamName>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Fetch Two Qubit Calib By Param Name
 */

export function useFetchTwoQubitCalibByParamName<
  TData = Awaited<ReturnType<typeof fetchTwoQubitCalibByParamName>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  paramName: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchTwoQubitCalibByParamName>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getFetchTwoQubitCalibByParamNameQueryOptions(
    name,
    paramName,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Fetch QPU stats by name
 */
export const fetchQpuStatsByName = (
  name: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<QPUStatsResponse>> => {
  return axios.get(`http://localhost:5715/qpu/${name}/stats`, options);
};

export const getFetchQpuStatsByNameQueryKey = (name: string) => {
  return [`http://localhost:5715/qpu/${name}/stats`] as const;
};

export const getFetchQpuStatsByNameQueryOptions = <
  TData = Awaited<ReturnType<typeof fetchQpuStatsByName>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchQpuStatsByName>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getFetchQpuStatsByNameQueryKey(name);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof fetchQpuStatsByName>>
  > = ({ signal }) => fetchQpuStatsByName(name, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!name,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof fetchQpuStatsByName>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type FetchQpuStatsByNameQueryResult = NonNullable<
  Awaited<ReturnType<typeof fetchQpuStatsByName>>
>;
export type FetchQpuStatsByNameQueryError = AxiosError<HTTPValidationError>;

export function useFetchQpuStatsByName<
  TData = Awaited<ReturnType<typeof fetchQpuStatsByName>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchQpuStatsByName>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof fetchQpuStatsByName>>,
          TError,
          Awaited<ReturnType<typeof fetchQpuStatsByName>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useFetchQpuStatsByName<
  TData = Awaited<ReturnType<typeof fetchQpuStatsByName>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchQpuStatsByName>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof fetchQpuStatsByName>>,
          TError,
          Awaited<ReturnType<typeof fetchQpuStatsByName>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useFetchQpuStatsByName<
  TData = Awaited<ReturnType<typeof fetchQpuStatsByName>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchQpuStatsByName>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Fetch QPU stats by name
 */

export function useFetchQpuStatsByName<
  TData = Awaited<ReturnType<typeof fetchQpuStatsByName>>,
  TError = AxiosError<HTTPValidationError>,
>(
  name: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchQpuStatsByName>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getFetchQpuStatsByNameQueryOptions(name, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
