/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * QDash API
 * API for QDash
 * OpenAPI spec version: 0.0.1
 */
import { useMutation } from "@tanstack/react-query";

import { customInstance } from "../../lib/custom-instance";

import type { ErrorType, BodyType } from "../../lib/custom-instance";
import type {
  Device,
  DeviceTopologyRequest,
  HTTPValidationError,
} from "../../schemas";
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult,
} from "@tanstack/react-query";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Get the device topology.
 * @summary Get the device topology
 */
export const getDeviceTopology = (
  deviceTopologyRequest: BodyType<DeviceTopologyRequest>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<Device>(
    {
      url: `/api/device_topology`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: deviceTopologyRequest,
      signal,
    },
    options,
  );
};

export const getGetDeviceTopologyMutationOptions = <
  TError = ErrorType<HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getDeviceTopology>>,
    TError,
    { data: BodyType<DeviceTopologyRequest> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof getDeviceTopology>>,
  TError,
  { data: BodyType<DeviceTopologyRequest> },
  TContext
> => {
  const mutationKey = ["getDeviceTopology"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof getDeviceTopology>>,
    { data: BodyType<DeviceTopologyRequest> }
  > = (props) => {
    const { data } = props ?? {};

    return getDeviceTopology(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type GetDeviceTopologyMutationResult = NonNullable<
  Awaited<ReturnType<typeof getDeviceTopology>>
>;
export type GetDeviceTopologyMutationBody = BodyType<DeviceTopologyRequest>;
export type GetDeviceTopologyMutationError = ErrorType<HTTPValidationError>;

/**
 * @summary Get the device topology
 */
export const useGetDeviceTopology = <
  TError = ErrorType<HTTPValidationError>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof getDeviceTopology>>,
      TError,
      { data: BodyType<DeviceTopologyRequest> },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof getDeviceTopology>>,
  TError,
  { data: BodyType<DeviceTopologyRequest> },
  TContext
> => {
  const mutationOptions = getGetDeviceTopologyMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Get the device topology as a PNG image.
 * @summary Get the device topology plot
 */
export const getDeviceTopologyPlot = (
  device: BodyType<Device>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<void>(
    {
      url: `/api/device_topology/plot`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: device,
      signal,
    },
    options,
  );
};

export const getGetDeviceTopologyPlotMutationOptions = <
  TError = ErrorType<HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getDeviceTopologyPlot>>,
    TError,
    { data: BodyType<Device> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof getDeviceTopologyPlot>>,
  TError,
  { data: BodyType<Device> },
  TContext
> => {
  const mutationKey = ["getDeviceTopologyPlot"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof getDeviceTopologyPlot>>,
    { data: BodyType<Device> }
  > = (props) => {
    const { data } = props ?? {};

    return getDeviceTopologyPlot(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type GetDeviceTopologyPlotMutationResult = NonNullable<
  Awaited<ReturnType<typeof getDeviceTopologyPlot>>
>;
export type GetDeviceTopologyPlotMutationBody = BodyType<Device>;
export type GetDeviceTopologyPlotMutationError = ErrorType<HTTPValidationError>;

/**
 * @summary Get the device topology plot
 */
export const useGetDeviceTopologyPlot = <
  TError = ErrorType<HTTPValidationError>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof getDeviceTopologyPlot>>,
      TError,
      { data: BodyType<Device> },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof getDeviceTopologyPlot>>,
  TError,
  { data: BodyType<Device> },
  TContext
> => {
  const mutationOptions = getGetDeviceTopologyPlotMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
