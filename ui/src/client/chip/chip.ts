/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * QDash API
 * API for QDash
 * OpenAPI spec version: 0.0.1
 */
import { useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import axios from "axios";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";

import type {
  ChipResponse,
  ExecutionResponseDetail,
  ExecutionResponseSummary,
  FetchTimeseriesTaskResultByTagAndParameterAndQidParams,
  FetchTimeseriesTaskResultByTagAndParameterParams,
  HTTPValidationError,
  LatestTaskGroupedByChipResponse,
  ListMuxResponse,
  MuxDetailResponse,
  TimeSeriesData,
} from "../../schemas";

/**
 * Fetch all chips.

Parameters
----------
current_user : User
    Current authenticated user

Returns
-------
list[ChipResponse]
    List of available chips
 * @summary Fetch all chips
 */
export const listChips = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ChipResponse[]>> => {
  return axios.get(`http://localhost:5715/api/chip`, options);
};

export const getListChipsQueryKey = () => {
  return [`http://localhost:5715/api/chip`] as const;
};

export const getListChipsQueryOptions = <
  TData = Awaited<ReturnType<typeof listChips>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listChips>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListChipsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listChips>>> = ({
    signal,
  }) => listChips({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listChips>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type ListChipsQueryResult = NonNullable<
  Awaited<ReturnType<typeof listChips>>
>;
export type ListChipsQueryError = AxiosError<unknown>;

export function useListChips<
  TData = Awaited<ReturnType<typeof listChips>>,
  TError = AxiosError<unknown>,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listChips>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof listChips>>,
        TError,
        Awaited<ReturnType<typeof listChips>>
      >,
      "initialData"
    >;
  axios?: AxiosRequestConfig;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useListChips<
  TData = Awaited<ReturnType<typeof listChips>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listChips>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof listChips>>,
        TError,
        Awaited<ReturnType<typeof listChips>>
      >,
      "initialData"
    >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useListChips<
  TData = Awaited<ReturnType<typeof listChips>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listChips>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Fetch all chips
 */

export function useListChips<
  TData = Awaited<ReturnType<typeof listChips>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listChips>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getListChipsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Fetch a chip by its ID.

Parameters
----------
chip_id : str
    ID of the chip to fetch
current_user_id : str
    Current user ID from authentication

Returns
-------
ChipResponse
    Chip information
 * @summary Fetch a chip
 */
export const fetchChip = (
  chipId: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ChipResponse>> => {
  return axios.get(`http://localhost:5715/api/chip/${chipId}`, options);
};

export const getFetchChipQueryKey = (chipId: string) => {
  return [`http://localhost:5715/api/chip/${chipId}`] as const;
};

export const getFetchChipQueryOptions = <
  TData = Awaited<ReturnType<typeof fetchChip>>,
  TError = AxiosError<HTTPValidationError>,
>(
  chipId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof fetchChip>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getFetchChipQueryKey(chipId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof fetchChip>>> = ({
    signal,
  }) => fetchChip(chipId, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!chipId,
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof fetchChip>>, TError, TData> & {
    queryKey: DataTag<QueryKey, TData>;
  };
};

export type FetchChipQueryResult = NonNullable<
  Awaited<ReturnType<typeof fetchChip>>
>;
export type FetchChipQueryError = AxiosError<HTTPValidationError>;

export function useFetchChip<
  TData = Awaited<ReturnType<typeof fetchChip>>,
  TError = AxiosError<HTTPValidationError>,
>(
  chipId: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof fetchChip>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof fetchChip>>,
          TError,
          Awaited<ReturnType<typeof fetchChip>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useFetchChip<
  TData = Awaited<ReturnType<typeof fetchChip>>,
  TError = AxiosError<HTTPValidationError>,
>(
  chipId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof fetchChip>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof fetchChip>>,
          TError,
          Awaited<ReturnType<typeof fetchChip>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useFetchChip<
  TData = Awaited<ReturnType<typeof fetchChip>>,
  TError = AxiosError<HTTPValidationError>,
>(
  chipId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof fetchChip>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Fetch a chip
 */

export function useFetchChip<
  TData = Awaited<ReturnType<typeof fetchChip>>,
  TError = AxiosError<HTTPValidationError>,
>(
  chipId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof fetchChip>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getFetchChipQueryOptions(chipId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Fetch all executions for a given chip.

Parameters
----------
chip_id : str
    ID of the chip to fetch executions for
current_user : str
    Current user ID from authentication

Returns
-------
list[ExecutionResponseSummary]
    List of executions for the chip
 * @summary Fetch executions
 */
export const listExecutionsByChipId = (
  chipId: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ExecutionResponseSummary[]>> => {
  return axios.get(
    `http://localhost:5715/api/chip/${chipId}/execution`,
    options,
  );
};

export const getListExecutionsByChipIdQueryKey = (chipId: string) => {
  return [`http://localhost:5715/api/chip/${chipId}/execution`] as const;
};

export const getListExecutionsByChipIdQueryOptions = <
  TData = Awaited<ReturnType<typeof listExecutionsByChipId>>,
  TError = AxiosError<HTTPValidationError>,
>(
  chipId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listExecutionsByChipId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getListExecutionsByChipIdQueryKey(chipId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof listExecutionsByChipId>>
  > = ({ signal }) =>
    listExecutionsByChipId(chipId, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!chipId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof listExecutionsByChipId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type ListExecutionsByChipIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof listExecutionsByChipId>>
>;
export type ListExecutionsByChipIdQueryError = AxiosError<HTTPValidationError>;

export function useListExecutionsByChipId<
  TData = Awaited<ReturnType<typeof listExecutionsByChipId>>,
  TError = AxiosError<HTTPValidationError>,
>(
  chipId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listExecutionsByChipId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listExecutionsByChipId>>,
          TError,
          Awaited<ReturnType<typeof listExecutionsByChipId>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useListExecutionsByChipId<
  TData = Awaited<ReturnType<typeof listExecutionsByChipId>>,
  TError = AxiosError<HTTPValidationError>,
>(
  chipId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listExecutionsByChipId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listExecutionsByChipId>>,
          TError,
          Awaited<ReturnType<typeof listExecutionsByChipId>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useListExecutionsByChipId<
  TData = Awaited<ReturnType<typeof listExecutionsByChipId>>,
  TError = AxiosError<HTTPValidationError>,
>(
  chipId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listExecutionsByChipId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Fetch executions
 */

export function useListExecutionsByChipId<
  TData = Awaited<ReturnType<typeof listExecutionsByChipId>>,
  TError = AxiosError<HTTPValidationError>,
>(
  chipId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listExecutionsByChipId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getListExecutionsByChipIdQueryOptions(chipId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Return the execution detail by its ID.

Parameters
----------
chip_id : str
    ID of the chip
execution_id : str
    ID of the execution to fetch
current_user_id : str
    Current user ID from authentication

Returns
-------
ExecutionResponseDetail
    Detailed execution information
 * @summary Fetch an execution by its ID
 */
export const fetchExecutionByChipId = (
  chipId: string,
  executionId: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ExecutionResponseDetail>> => {
  return axios.get(
    `http://localhost:5715/api/chip/${chipId}/execution/${executionId}`,
    options,
  );
};

export const getFetchExecutionByChipIdQueryKey = (
  chipId: string,
  executionId: string,
) => {
  return [
    `http://localhost:5715/api/chip/${chipId}/execution/${executionId}`,
  ] as const;
};

export const getFetchExecutionByChipIdQueryOptions = <
  TData = Awaited<ReturnType<typeof fetchExecutionByChipId>>,
  TError = AxiosError<HTTPValidationError>,
>(
  chipId: string,
  executionId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchExecutionByChipId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getFetchExecutionByChipIdQueryKey(chipId, executionId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof fetchExecutionByChipId>>
  > = ({ signal }) =>
    fetchExecutionByChipId(chipId, executionId, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!(chipId && executionId),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof fetchExecutionByChipId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type FetchExecutionByChipIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof fetchExecutionByChipId>>
>;
export type FetchExecutionByChipIdQueryError = AxiosError<HTTPValidationError>;

export function useFetchExecutionByChipId<
  TData = Awaited<ReturnType<typeof fetchExecutionByChipId>>,
  TError = AxiosError<HTTPValidationError>,
>(
  chipId: string,
  executionId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchExecutionByChipId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof fetchExecutionByChipId>>,
          TError,
          Awaited<ReturnType<typeof fetchExecutionByChipId>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useFetchExecutionByChipId<
  TData = Awaited<ReturnType<typeof fetchExecutionByChipId>>,
  TError = AxiosError<HTTPValidationError>,
>(
  chipId: string,
  executionId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchExecutionByChipId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof fetchExecutionByChipId>>,
          TError,
          Awaited<ReturnType<typeof fetchExecutionByChipId>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useFetchExecutionByChipId<
  TData = Awaited<ReturnType<typeof fetchExecutionByChipId>>,
  TError = AxiosError<HTTPValidationError>,
>(
  chipId: string,
  executionId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchExecutionByChipId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Fetch an execution by its ID
 */

export function useFetchExecutionByChipId<
  TData = Awaited<ReturnType<typeof fetchExecutionByChipId>>,
  TError = AxiosError<HTTPValidationError>,
>(
  chipId: string,
  executionId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchExecutionByChipId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getFetchExecutionByChipIdQueryOptions(
    chipId,
    executionId,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Fetch the multiplexer details.

Parameters
----------
chip_id : str
    ID of the chip
mux_id : int
    ID of the multiplexer
current_user : User
    Current authenticated user

Returns
-------
MuxDetailResponse
    Multiplexer details
 * @summary Fetch the multiplexer details
 */
export const fetchMuxDetails = (
  chipId: string,
  muxId: number,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<MuxDetailResponse>> => {
  return axios.get(
    `http://localhost:5715/api/chip/${chipId}/mux/${muxId}`,
    options,
  );
};

export const getFetchMuxDetailsQueryKey = (chipId: string, muxId: number) => {
  return [`http://localhost:5715/api/chip/${chipId}/mux/${muxId}`] as const;
};

export const getFetchMuxDetailsQueryOptions = <
  TData = Awaited<ReturnType<typeof fetchMuxDetails>>,
  TError = AxiosError<HTTPValidationError>,
>(
  chipId: string,
  muxId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchMuxDetails>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getFetchMuxDetailsQueryKey(chipId, muxId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof fetchMuxDetails>>> = ({
    signal,
  }) => fetchMuxDetails(chipId, muxId, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!(chipId && muxId),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof fetchMuxDetails>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type FetchMuxDetailsQueryResult = NonNullable<
  Awaited<ReturnType<typeof fetchMuxDetails>>
>;
export type FetchMuxDetailsQueryError = AxiosError<HTTPValidationError>;

export function useFetchMuxDetails<
  TData = Awaited<ReturnType<typeof fetchMuxDetails>>,
  TError = AxiosError<HTTPValidationError>,
>(
  chipId: string,
  muxId: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchMuxDetails>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof fetchMuxDetails>>,
          TError,
          Awaited<ReturnType<typeof fetchMuxDetails>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useFetchMuxDetails<
  TData = Awaited<ReturnType<typeof fetchMuxDetails>>,
  TError = AxiosError<HTTPValidationError>,
>(
  chipId: string,
  muxId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchMuxDetails>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof fetchMuxDetails>>,
          TError,
          Awaited<ReturnType<typeof fetchMuxDetails>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useFetchMuxDetails<
  TData = Awaited<ReturnType<typeof fetchMuxDetails>>,
  TError = AxiosError<HTTPValidationError>,
>(
  chipId: string,
  muxId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchMuxDetails>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Fetch the multiplexer details
 */

export function useFetchMuxDetails<
  TData = Awaited<ReturnType<typeof fetchMuxDetails>>,
  TError = AxiosError<HTTPValidationError>,
>(
  chipId: string,
  muxId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchMuxDetails>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getFetchMuxDetailsQueryOptions(chipId, muxId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Fetch the multiplexers.

Parameters
----------
chip_id : str
    ID of the chip
current_user : User
    Current authenticated user

Returns
-------
ListMuxResponse
    Multiplexdetails
 * @summary Fetch the multiplexers
 */
export const listMuxes = (
  chipId: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ListMuxResponse>> => {
  return axios.get(`http://localhost:5715/api/chip/${chipId}/mux`, options);
};

export const getListMuxesQueryKey = (chipId: string) => {
  return [`http://localhost:5715/api/chip/${chipId}/mux`] as const;
};

export const getListMuxesQueryOptions = <
  TData = Awaited<ReturnType<typeof listMuxes>>,
  TError = AxiosError<HTTPValidationError>,
>(
  chipId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listMuxes>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListMuxesQueryKey(chipId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listMuxes>>> = ({
    signal,
  }) => listMuxes(chipId, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!chipId,
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof listMuxes>>, TError, TData> & {
    queryKey: DataTag<QueryKey, TData>;
  };
};

export type ListMuxesQueryResult = NonNullable<
  Awaited<ReturnType<typeof listMuxes>>
>;
export type ListMuxesQueryError = AxiosError<HTTPValidationError>;

export function useListMuxes<
  TData = Awaited<ReturnType<typeof listMuxes>>,
  TError = AxiosError<HTTPValidationError>,
>(
  chipId: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listMuxes>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listMuxes>>,
          TError,
          Awaited<ReturnType<typeof listMuxes>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useListMuxes<
  TData = Awaited<ReturnType<typeof listMuxes>>,
  TError = AxiosError<HTTPValidationError>,
>(
  chipId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listMuxes>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listMuxes>>,
          TError,
          Awaited<ReturnType<typeof listMuxes>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useListMuxes<
  TData = Awaited<ReturnType<typeof listMuxes>>,
  TError = AxiosError<HTTPValidationError>,
>(
  chipId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listMuxes>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Fetch the multiplexers
 */

export function useListMuxes<
  TData = Awaited<ReturnType<typeof listMuxes>>,
  TError = AxiosError<HTTPValidationError>,
>(
  chipId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listMuxes>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getListMuxesQueryOptions(chipId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Fetch the multiplexers.
 * @summary Fetch the multiplexers
 */
export const fetchLatestTaskGroupedByChip = (
  chipId: string,
  taskName: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<LatestTaskGroupedByChipResponse>> => {
  return axios.get(
    `http://localhost:5715/api/chip/${chipId}/task/${taskName}`,
    options,
  );
};

export const getFetchLatestTaskGroupedByChipQueryKey = (
  chipId: string,
  taskName: string,
) => {
  return [`http://localhost:5715/api/chip/${chipId}/task/${taskName}`] as const;
};

export const getFetchLatestTaskGroupedByChipQueryOptions = <
  TData = Awaited<ReturnType<typeof fetchLatestTaskGroupedByChip>>,
  TError = AxiosError<HTTPValidationError>,
>(
  chipId: string,
  taskName: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchLatestTaskGroupedByChip>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getFetchLatestTaskGroupedByChipQueryKey(chipId, taskName);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof fetchLatestTaskGroupedByChip>>
  > = ({ signal }) =>
    fetchLatestTaskGroupedByChip(chipId, taskName, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!(chipId && taskName),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof fetchLatestTaskGroupedByChip>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type FetchLatestTaskGroupedByChipQueryResult = NonNullable<
  Awaited<ReturnType<typeof fetchLatestTaskGroupedByChip>>
>;
export type FetchLatestTaskGroupedByChipQueryError =
  AxiosError<HTTPValidationError>;

export function useFetchLatestTaskGroupedByChip<
  TData = Awaited<ReturnType<typeof fetchLatestTaskGroupedByChip>>,
  TError = AxiosError<HTTPValidationError>,
>(
  chipId: string,
  taskName: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchLatestTaskGroupedByChip>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof fetchLatestTaskGroupedByChip>>,
          TError,
          Awaited<ReturnType<typeof fetchLatestTaskGroupedByChip>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useFetchLatestTaskGroupedByChip<
  TData = Awaited<ReturnType<typeof fetchLatestTaskGroupedByChip>>,
  TError = AxiosError<HTTPValidationError>,
>(
  chipId: string,
  taskName: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchLatestTaskGroupedByChip>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof fetchLatestTaskGroupedByChip>>,
          TError,
          Awaited<ReturnType<typeof fetchLatestTaskGroupedByChip>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useFetchLatestTaskGroupedByChip<
  TData = Awaited<ReturnType<typeof fetchLatestTaskGroupedByChip>>,
  TError = AxiosError<HTTPValidationError>,
>(
  chipId: string,
  taskName: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchLatestTaskGroupedByChip>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Fetch the multiplexers
 */

export function useFetchLatestTaskGroupedByChip<
  TData = Awaited<ReturnType<typeof fetchLatestTaskGroupedByChip>>,
  TError = AxiosError<HTTPValidationError>,
>(
  chipId: string,
  taskName: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchLatestTaskGroupedByChip>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getFetchLatestTaskGroupedByChipQueryOptions(
    chipId,
    taskName,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Fetch the timeseries task result by tag and parameter for a specific qid.

Returns
-------
    TimeSeriesData: Time series data for the specified qid.
 * @summary Fetch the timeseries task result by tag and parameter for a specific qid
 */
export const fetchTimeseriesTaskResultByTagAndParameterAndQid = (
  chipId: string,
  parameter: string,
  qid: string,
  params: FetchTimeseriesTaskResultByTagAndParameterAndQidParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<TimeSeriesData>> => {
  return axios.get(
    `http://localhost:5715/api/chip/${chipId}/parameter/${parameter}/qid/${qid}`,
    {
      ...options,
      params: { ...params, ...options?.params },
    },
  );
};

export const getFetchTimeseriesTaskResultByTagAndParameterAndQidQueryKey = (
  chipId: string,
  parameter: string,
  qid: string,
  params: FetchTimeseriesTaskResultByTagAndParameterAndQidParams,
) => {
  return [
    `http://localhost:5715/api/chip/${chipId}/parameter/${parameter}/qid/${qid}`,
    ...(params ? [params] : []),
  ] as const;
};

export const getFetchTimeseriesTaskResultByTagAndParameterAndQidQueryOptions = <
  TData = Awaited<
    ReturnType<typeof fetchTimeseriesTaskResultByTagAndParameterAndQid>
  >,
  TError = AxiosError<HTTPValidationError>,
>(
  chipId: string,
  parameter: string,
  qid: string,
  params: FetchTimeseriesTaskResultByTagAndParameterAndQidParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof fetchTimeseriesTaskResultByTagAndParameterAndQid>
        >,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getFetchTimeseriesTaskResultByTagAndParameterAndQidQueryKey(
      chipId,
      parameter,
      qid,
      params,
    );

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof fetchTimeseriesTaskResultByTagAndParameterAndQid>>
  > = ({ signal }) =>
    fetchTimeseriesTaskResultByTagAndParameterAndQid(
      chipId,
      parameter,
      qid,
      params,
      { signal, ...axiosOptions },
    );

  return {
    queryKey,
    queryFn,
    enabled: !!(chipId && parameter && qid),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<
      ReturnType<typeof fetchTimeseriesTaskResultByTagAndParameterAndQid>
    >,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type FetchTimeseriesTaskResultByTagAndParameterAndQidQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof fetchTimeseriesTaskResultByTagAndParameterAndQid>>
  >;
export type FetchTimeseriesTaskResultByTagAndParameterAndQidQueryError =
  AxiosError<HTTPValidationError>;

export function useFetchTimeseriesTaskResultByTagAndParameterAndQid<
  TData = Awaited<
    ReturnType<typeof fetchTimeseriesTaskResultByTagAndParameterAndQid>
  >,
  TError = AxiosError<HTTPValidationError>,
>(
  chipId: string,
  parameter: string,
  qid: string,
  params: FetchTimeseriesTaskResultByTagAndParameterAndQidParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof fetchTimeseriesTaskResultByTagAndParameterAndQid>
        >,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof fetchTimeseriesTaskResultByTagAndParameterAndQid>
          >,
          TError,
          Awaited<
            ReturnType<typeof fetchTimeseriesTaskResultByTagAndParameterAndQid>
          >
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useFetchTimeseriesTaskResultByTagAndParameterAndQid<
  TData = Awaited<
    ReturnType<typeof fetchTimeseriesTaskResultByTagAndParameterAndQid>
  >,
  TError = AxiosError<HTTPValidationError>,
>(
  chipId: string,
  parameter: string,
  qid: string,
  params: FetchTimeseriesTaskResultByTagAndParameterAndQidParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof fetchTimeseriesTaskResultByTagAndParameterAndQid>
        >,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof fetchTimeseriesTaskResultByTagAndParameterAndQid>
          >,
          TError,
          Awaited<
            ReturnType<typeof fetchTimeseriesTaskResultByTagAndParameterAndQid>
          >
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useFetchTimeseriesTaskResultByTagAndParameterAndQid<
  TData = Awaited<
    ReturnType<typeof fetchTimeseriesTaskResultByTagAndParameterAndQid>
  >,
  TError = AxiosError<HTTPValidationError>,
>(
  chipId: string,
  parameter: string,
  qid: string,
  params: FetchTimeseriesTaskResultByTagAndParameterAndQidParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof fetchTimeseriesTaskResultByTagAndParameterAndQid>
        >,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Fetch the timeseries task result by tag and parameter for a specific qid
 */

export function useFetchTimeseriesTaskResultByTagAndParameterAndQid<
  TData = Awaited<
    ReturnType<typeof fetchTimeseriesTaskResultByTagAndParameterAndQid>
  >,
  TError = AxiosError<HTTPValidationError>,
>(
  chipId: string,
  parameter: string,
  qid: string,
  params: FetchTimeseriesTaskResultByTagAndParameterAndQidParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof fetchTimeseriesTaskResultByTagAndParameterAndQid>
        >,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions =
    getFetchTimeseriesTaskResultByTagAndParameterAndQidQueryOptions(
      chipId,
      parameter,
      qid,
      params,
      options,
    );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Fetch the timeseries task result by tag and parameter for all qids.

Returns
-------
    TimeSeriesData: Time series data for all qids.
 * @summary Fetch the timeseries task result by tag and parameter for all qids
 */
export const fetchTimeseriesTaskResultByTagAndParameter = (
  chipId: string,
  parameter: string,
  params: FetchTimeseriesTaskResultByTagAndParameterParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<TimeSeriesData>> => {
  return axios.get(
    `http://localhost:5715/api/chip/${chipId}/parameter/${parameter}`,
    {
      ...options,
      params: { ...params, ...options?.params },
    },
  );
};

export const getFetchTimeseriesTaskResultByTagAndParameterQueryKey = (
  chipId: string,
  parameter: string,
  params: FetchTimeseriesTaskResultByTagAndParameterParams,
) => {
  return [
    `http://localhost:5715/api/chip/${chipId}/parameter/${parameter}`,
    ...(params ? [params] : []),
  ] as const;
};

export const getFetchTimeseriesTaskResultByTagAndParameterQueryOptions = <
  TData = Awaited<
    ReturnType<typeof fetchTimeseriesTaskResultByTagAndParameter>
  >,
  TError = AxiosError<HTTPValidationError>,
>(
  chipId: string,
  parameter: string,
  params: FetchTimeseriesTaskResultByTagAndParameterParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchTimeseriesTaskResultByTagAndParameter>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getFetchTimeseriesTaskResultByTagAndParameterQueryKey(
      chipId,
      parameter,
      params,
    );

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof fetchTimeseriesTaskResultByTagAndParameter>>
  > = ({ signal }) =>
    fetchTimeseriesTaskResultByTagAndParameter(chipId, parameter, params, {
      signal,
      ...axiosOptions,
    });

  return {
    queryKey,
    queryFn,
    enabled: !!(chipId && parameter),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof fetchTimeseriesTaskResultByTagAndParameter>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type FetchTimeseriesTaskResultByTagAndParameterQueryResult = NonNullable<
  Awaited<ReturnType<typeof fetchTimeseriesTaskResultByTagAndParameter>>
>;
export type FetchTimeseriesTaskResultByTagAndParameterQueryError =
  AxiosError<HTTPValidationError>;

export function useFetchTimeseriesTaskResultByTagAndParameter<
  TData = Awaited<
    ReturnType<typeof fetchTimeseriesTaskResultByTagAndParameter>
  >,
  TError = AxiosError<HTTPValidationError>,
>(
  chipId: string,
  parameter: string,
  params: FetchTimeseriesTaskResultByTagAndParameterParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchTimeseriesTaskResultByTagAndParameter>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof fetchTimeseriesTaskResultByTagAndParameter>
          >,
          TError,
          Awaited<ReturnType<typeof fetchTimeseriesTaskResultByTagAndParameter>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useFetchTimeseriesTaskResultByTagAndParameter<
  TData = Awaited<
    ReturnType<typeof fetchTimeseriesTaskResultByTagAndParameter>
  >,
  TError = AxiosError<HTTPValidationError>,
>(
  chipId: string,
  parameter: string,
  params: FetchTimeseriesTaskResultByTagAndParameterParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchTimeseriesTaskResultByTagAndParameter>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof fetchTimeseriesTaskResultByTagAndParameter>
          >,
          TError,
          Awaited<ReturnType<typeof fetchTimeseriesTaskResultByTagAndParameter>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useFetchTimeseriesTaskResultByTagAndParameter<
  TData = Awaited<
    ReturnType<typeof fetchTimeseriesTaskResultByTagAndParameter>
  >,
  TError = AxiosError<HTTPValidationError>,
>(
  chipId: string,
  parameter: string,
  params: FetchTimeseriesTaskResultByTagAndParameterParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchTimeseriesTaskResultByTagAndParameter>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Fetch the timeseries task result by tag and parameter for all qids
 */

export function useFetchTimeseriesTaskResultByTagAndParameter<
  TData = Awaited<
    ReturnType<typeof fetchTimeseriesTaskResultByTagAndParameter>
  >,
  TError = AxiosError<HTTPValidationError>,
>(
  chipId: string,
  parameter: string,
  params: FetchTimeseriesTaskResultByTagAndParameterParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fetchTimeseriesTaskResultByTagAndParameter>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions =
    getFetchTimeseriesTaskResultByTagAndParameterQueryOptions(
      chipId,
      parameter,
      params,
      options,
    );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
