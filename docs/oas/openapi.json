{
  "openapi": "3.1.0",
  "info": {
    "title": "QDash API",
    "summary": "QDash API",
    "description": "API for QDash",
    "contact": {
      "name": "QDash",
      "email": "oqtopus-team@googlegroups.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "0.0.1"
  },
  "paths": {
    "/api/calibration/note": {
      "get": {
        "tags": [
          "calibration"
        ],
        "summary": "Fetches all the cron schedules.",
        "description": "Get the calibration note.",
        "operationId": "listCronSchedules",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalibrationNoteResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/api/calibration/cron-schedule": {
      "get": {
        "tags": [
          "calibration"
        ],
        "summary": "Fetches all the cron schedules.",
        "description": "List all the cron schedules.",
        "operationId": "listCronSchedules",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListCronScheduleResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "calibration"
        ],
        "summary": "Schedules a calibration with cron.",
        "description": "Schedule a calibration.",
        "operationId": "scheduleCronCalib",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScheduleCronCalibRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleCronCalibResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/api/calibration": {
      "post": {
        "tags": [
          "calibration"
        ],
        "summary": "Executes a calibration by creating a flow run from a deployment.",
        "description": "Create a flow run from a deployment.",
        "operationId": "execute_calib",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExecuteCalibRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExecuteCalibResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/api/calibration/schedule": {
      "get": {
        "tags": [
          "calibration"
        ],
        "summary": "Fetches all the calibration schedules.",
        "description": "Fetch all the calibration schedules.",
        "operationId": "fetch_all_calib_schedule",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ScheduleCalibResponse"
                  },
                  "type": "array",
                  "title": "Response Fetch All Calib Schedule"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "calibration"
        ],
        "summary": "Schedules a calibration.",
        "description": "Schedule a calibration.",
        "operationId": "schedule_calib",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScheduleCalibRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleCalibResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/api/calibration/schedule/{flow_run_id}": {
      "delete": {
        "tags": [
          "calibration"
        ],
        "summary": "Deletes a calibration schedule.",
        "description": "Delete a calibration schedule.",
        "operationId": "delete_calib_schedule",
        "parameters": [
          {
            "name": "flow_run_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Flow Run Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/menu": {
      "get": {
        "tags": [
          "menu"
        ],
        "summary": "Retrieve a list of menu items.",
        "description": "Retrieve a list of menu items.\n\nReturns\n-------\n    ListMenuResponse: A response containing the list of menu items.",
        "operationId": "list_menu",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListMenuResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "menu"
        ],
        "summary": "Create a new menu item.",
        "description": "Create a new menu item.\n\nArgs:\n----\n    request (CreateMenuRequest): The request object containing the menu item details.\n    current_user (User): The current authenticated user.\n\nReturns:\n-------\n    CreateMenuResponse: The response object containing the name of the created menu item.",
        "operationId": "create_menu",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMenuRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateMenuResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/api/menu/preset": {
      "get": {
        "tags": [
          "menu"
        ],
        "summary": "Retrieve a list of preset menu items.",
        "description": "Retrieve a list of preset menu items.\n\nReturns\n-------\n    ListMenuResponse: A response containing the list of preset menu items.",
        "operationId": "listPreset",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListMenuResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Detail"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/api/menu/{name}": {
      "get": {
        "tags": [
          "menu"
        ],
        "summary": "Retrieve a menu by its name.",
        "description": "Retrieve a menu by its name.\n\nArgs:\n----\n    name (str): The name of the menu.\n    current_user (User): The current authenticated user.\n\nReturns:\n-------\n    GetMenuResponse: The response containing the menu details.\n\nRaises:\n------\n    InternalServerError: If there is an error retrieving the menu.\n    NotFoundErrorResponse: If the menu is not found.",
        "operationId": "get_menu_by_name",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMenuResponse"
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Detail"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "menu"
        ],
        "summary": "Update a menu with the given name.",
        "description": "Update a menu with the given name.\n\nArgs:\n----\n    name (str): The name of the menu to update.\n    req (UpdateMenuRequest): The request object containing the updated menu data.\n    current_user (User): The current authenticated user.\n\nReturns:\n-------\n    Union[UpdateMenuResponse, NotFoundErrorResponse]: The response object indicating the success of the update or an error if the menu is not found.",
        "operationId": "update_menu",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Name"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMenuRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateMenuResponse"
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Detail"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "menu"
        ],
        "summary": "Delete a menu by its name.",
        "description": "Delete a menu by its name.\n\nArgs:\n----\n    name (str): The name of the menu to be deleted.\n    current_user (User): The current authenticated user.\n\nReturns:\n-------\n    DeleteMenuResponse | NotFoundErrorResponse: The response indicating the success or failure of the deletion.",
        "operationId": "delete_menu",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteMenuResponse"
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Detail"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/settings": {
      "get": {
        "tags": [
          "settings"
        ],
        "summary": "Get settings",
        "description": "Get settings from the server",
        "operationId": "fetch_config",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Settings"
                }
              }
            }
          }
        }
      }
    },
    "/api/executions/figure": {
      "get": {
        "tags": [
          "execution"
        ],
        "summary": "Fetches a calibration figure by its path",
        "description": "Fetch a calibration figure by its path.",
        "operationId": "fetchFigureByPath",
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Path"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Detail"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/executions/lock_status": {
      "get": {
        "tags": [
          "execution"
        ],
        "summary": "Fetches the status of a calibration.",
        "description": "Fetch the status of the execution lock.",
        "operationId": "fetchExecutionLockStatus",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExecutionLockStatusResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/chip": {
      "get": {
        "tags": [
          "chip"
        ],
        "summary": "Fetch all chips",
        "description": "Fetch all chips.\n\nParameters\n----------\ncurrent_user : User\n    Current authenticated user\n\nReturns\n-------\nlist[ChipResponse]\n    List of available chips",
        "operationId": "listChips",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ChipResponse"
                  },
                  "type": "array",
                  "title": "Response Listchips"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/api/chip/{chip_id}/dates": {
      "get": {
        "tags": [
          "chip"
        ],
        "summary": "Fetch available dates for a chip",
        "description": "Fetch available dates for a chip from execution counter.\n\nParameters\n----------\nchip_id : str\n    ID of the chip\ncurrent_user : User\n    Current authenticated user\n\nReturns\n-------\nlist[str]\n    List of available dates in ISO format",
        "operationId": "fetchChipDates",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "chip_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Chip Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChipDatesResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/chip/{chip_id}": {
      "get": {
        "tags": [
          "chip"
        ],
        "summary": "Fetch a chip",
        "description": "Fetch a chip by its ID.\n\nParameters\n----------\nchip_id : str\n    ID of the chip to fetch\ncurrent_user_id : str\n    Current user ID from authentication\n\nReturns\n-------\nChipResponse\n    Chip information",
        "operationId": "fetchChip",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "chip_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Chip Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChipResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/chip/{chip_id}/execution": {
      "get": {
        "tags": [
          "chip"
        ],
        "summary": "Fetch executions",
        "description": "Fetch all executions for a given chip.\n\nParameters\n----------\nchip_id : str\n    ID of the chip to fetch executions for\ncurrent_user : str\n    Current user ID from authentication\n\nReturns\n-------\nlist[ExecutionResponseSummary]\n    List of executions for the chip",
        "operationId": "listExecutionsByChipId",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "chip_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Chip Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExecutionResponseSummary"
                  },
                  "title": "Response Listexecutionsbychipid"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/chip/{chip_id}/execution/{execution_id}": {
      "get": {
        "tags": [
          "chip"
        ],
        "summary": "Fetch an execution by its ID",
        "description": "Return the execution detail by its ID.\n\nParameters\n----------\nchip_id : str\n    ID of the chip\nexecution_id : str\n    ID of the execution to fetch\ncurrent_user_id : str\n    Current user ID from authentication\n\nReturns\n-------\nExecutionResponseDetail\n    Detailed execution information",
        "operationId": "fetchExecutionByChipId",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "chip_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Chip Id"
            }
          },
          {
            "name": "execution_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Execution Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExecutionResponseDetail"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/chip/{chip_id}/mux/{mux_id}": {
      "get": {
        "tags": [
          "chip"
        ],
        "summary": "Fetch the multiplexer details",
        "description": "Fetch the multiplexer details.\n\nParameters\n----------\nchip_id : str\n    ID of the chip\nmux_id : int\n    ID of the multiplexer\ncurrent_user : User\n    Current authenticated user\n\nReturns\n-------\nMuxDetailResponse\n    Multiplexer details",
        "operationId": "fetchMuxDetails",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "chip_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Chip Id"
            }
          },
          {
            "name": "mux_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Mux Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MuxDetailResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/chip/{chip_id}/mux": {
      "get": {
        "tags": [
          "chip"
        ],
        "summary": "Fetch the multiplexers",
        "description": "Fetch the multiplexers.\n\nParameters\n----------\nchip_id : str\n    ID of the chip\ncurrent_user : User\n    Current authenticated user\n\nReturns\n-------\nListMuxResponse\n    Multiplexdetails",
        "operationId": "listMuxes",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "chip_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Chip Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListMuxResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/chip/{chip_id}/task/qubit/{task_name}/history/{recorded_date}": {
      "get": {
        "tags": [
          "chip"
        ],
        "summary": "Fetch historical task results",
        "description": "Fetch historical task results for a specific date.\n\nParameters\n----------\nchip_id : str\n    ID of the chip\ntask_name : str\n    Name of the task to fetch\nrecorded_date : str\n    Date to fetch history for (ISO format YYYY-MM-DD)\ncurrent_user : User\n    Current authenticated user\n\nReturns\n-------\nLatestTaskGroupedByChipResponse\n    Historical task results for all qubits on the specified date",
        "operationId": "fetchHistoricalQubitTaskGroupedByChip",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "chip_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Chip Id"
            }
          },
          {
            "name": "task_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Task Name"
            }
          },
          {
            "name": "recorded_date",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Recorded Date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LatestTaskGroupedByChipResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/chip/{chip_id}/task/qubit/{task_name}": {
      "get": {
        "tags": [
          "chip"
        ],
        "summary": "Fetch the multiplexers",
        "description": "Fetch the multiplexers.",
        "operationId": "fetchLatestQubitTaskGroupedByChip",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "chip_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Chip Id"
            }
          },
          {
            "name": "task_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Task Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LatestTaskGroupedByChipResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/chip/{chip_id}/task/coupling/{task_name}/history/{recorded_date}": {
      "get": {
        "tags": [
          "chip"
        ],
        "summary": "Fetch historical task results",
        "description": "Fetch historical task results for a specific date.\n\nParameters\n----------\nchip_id : str\n    ID of the chip\ntask_name : str\n    Name of the task to fetch\nrecorded_date : str\n    Date to fetch history for (ISO format YYYY-MM-DD)\ncurrent_user : User\n    Current authenticated user\n\nReturns\n-------\nLatestTaskGroupedByChipResponse\n    Historical task results for all qubits on the specified date",
        "operationId": "fetchHistoricalCoupingTaskGroupedByChip",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "chip_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Chip Id"
            }
          },
          {
            "name": "task_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Task Name"
            }
          },
          {
            "name": "recorded_date",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Recorded Date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LatestTaskGroupedByChipResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/chip/{chip_id}/task/coupling/{task_name}": {
      "get": {
        "tags": [
          "chip"
        ],
        "summary": "Fetch the multiplexers",
        "description": "Fetch the multiplexers.",
        "operationId": "fetchLatestCouplingTaskGroupedByChip",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "chip_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Chip Id"
            }
          },
          {
            "name": "task_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Task Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LatestTaskGroupedByChipResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/chip/{chip_id}/parameter/{parameter}/qid/{qid}": {
      "get": {
        "tags": [
          "chip"
        ],
        "summary": "Fetch the timeseries task result by tag and parameter for a specific qid",
        "description": "Fetch the timeseries task result by tag and parameter for a specific qid.\n\nReturns\n-------\n    TimeSeriesData: Time series data for the specified qid.",
        "operationId": "fetchTimeseriesTaskResultByTagAndParameterAndQid",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "chip_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Chip Id"
            }
          },
          {
            "name": "parameter",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Parameter"
            }
          },
          {
            "name": "qid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Qid"
            }
          },
          {
            "name": "tag",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Tag"
            }
          },
          {
            "name": "start_at",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Start At"
            }
          },
          {
            "name": "end_at",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "End At"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeSeriesData"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/chip/{chip_id}/parameter/{parameter}": {
      "get": {
        "tags": [
          "chip"
        ],
        "summary": "Fetch the timeseries task result by tag and parameter for all qids",
        "description": "Fetch the timeseries task result by tag and parameter for all qids.\n\nReturns\n-------\n    TimeSeriesData: Time series data for all qids.",
        "operationId": "fetchTimeseriesTaskResultByTagAndParameter",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "chip_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Chip Id"
            }
          },
          {
            "name": "parameter",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Parameter"
            }
          },
          {
            "name": "tag",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Tag"
            }
          },
          {
            "name": "start_at",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Start At"
            }
          },
          {
            "name": "end_at",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "End At"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeSeriesData"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/file/raw_data": {
      "get": {
        "tags": [
          "file"
        ],
        "summary": "download file",
        "description": "Download a file.",
        "operationId": "downloadFile",
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Path"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/file/zip": {
      "get": {
        "tags": [
          "file"
        ],
        "summary": "download file or directory as zip",
        "description": "Download a file or directory as zip.",
        "operationId": "downloadZipFile",
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Path"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/token": {
      "post": {
        "tags": [
          "auth",
          "authentication"
        ],
        "summary": "Login For Access Token",
        "operationId": "auth-login_for_access_token",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Body_auth-login_for_access_token",
                "properties": {
                  "username": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  },
                  "grant_type": {
                    "type": "string",
                    "default": "password"
                  }
                },
                "type": "object",
                "required": [
                  "username",
                  "password"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/register": {
      "post": {
        "tags": [
          "auth",
          "authentication"
        ],
        "summary": "Register User",
        "operationId": "auth-register_user",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/me": {
      "get": {
        "tags": [
          "auth",
          "authentication"
        ],
        "summary": "Read Users Me",
        "operationId": "auth-read_users_me",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/api/auth/logout": {
      "post": {
        "tags": [
          "auth",
          "authentication"
        ],
        "summary": "Logout",
        "description": "Logout endpoint.\n\nThis endpoint doesn't need to do anything on the backend since the token is managed client-side.\nThe client will remove the token from cookies.",
        "operationId": "auth-logout",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/api/tasks": {
      "get": {
        "tags": [
          "task"
        ],
        "summary": "Fetch all tasks",
        "description": "Fetch all tasks.\n\nArgs:\n----\n    current_user (User): The current user.\n\nReturns:\n-------\n    list[TaskResponse]: The list of tasks.",
        "operationId": "fetch_all_tasks",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListTaskResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/api/parameter": {
      "get": {
        "tags": [
          "parameter"
        ],
        "summary": "Fetch all parameters",
        "description": "Fetch all parameters.\n\nArgs:\n----\n    current_user (User): The current user.\n\nReturns: ListParameterResponse\n-------",
        "operationId": "fetchAllParameters",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListParameterResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/api/tag": {
      "get": {
        "tags": [
          "tag"
        ],
        "summary": "list all tag",
        "description": "Fetch all tasks.\n\nArgs:\n----\n    current_user (User): The current user.\n\nReturns:\n-------\n    ListTaskResponse: The list of tasks.",
        "operationId": "listAllTag",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListTagResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/api/device_topology": {
      "post": {
        "tags": [
          "device_topology"
        ],
        "summary": "Get the device topology",
        "description": "Get the device topology.",
        "operationId": "getDeviceTopology",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceTopologyRequst"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Device"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/api/device_topology/plot": {
      "post": {
        "tags": [
          "device_topology"
        ],
        "summary": "Get the device topology plot",
        "description": "Get the device topology as a PNG image.",
        "operationId": "getDeviceTopologyPlot",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Device"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "BatchNode": {
        "properties": {
          "batch": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Batch"
          }
        },
        "type": "object",
        "required": [
          "batch"
        ],
        "title": "BatchNode",
        "description": "Batch node model."
      },
      "Body_auth-login_for_access_token": {
        "properties": {
          "username": {
            "type": "string",
            "title": "Username"
          },
          "password": {
            "type": "string",
            "title": "Password"
          },
          "grant_type": {
            "type": "string",
            "title": "Grant Type",
            "default": "password"
          }
        },
        "type": "object",
        "required": [
          "username",
          "password"
        ],
        "title": "Body_auth-login_for_access_token"
      },
      "CalibrationNoteResponse": {
        "properties": {
          "username": {
            "type": "string",
            "title": "Username"
          },
          "execution_id": {
            "type": "string",
            "title": "Execution Id"
          },
          "task_id": {
            "type": "string",
            "title": "Task Id"
          },
          "note": {
            "additionalProperties": true,
            "type": "object",
            "title": "Note"
          },
          "timestamp": {
            "type": "string",
            "title": "Timestamp"
          }
        },
        "type": "object",
        "required": [
          "username",
          "execution_id",
          "task_id",
          "note",
          "timestamp"
        ],
        "title": "CalibrationNoteResponse",
        "description": "CalibrationNote is a subclass of BaseModel."
      },
      "ChipDatesResponse": {
        "properties": {
          "data": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Data"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "ChipDatesResponse",
        "description": "Response model for chip dates."
      },
      "ChipResponse": {
        "properties": {
          "chip_id": {
            "type": "string",
            "title": "Chip Id"
          },
          "size": {
            "type": "integer",
            "title": "Size",
            "default": 64
          },
          "qubits": {
            "additionalProperties": true,
            "type": "object",
            "title": "Qubits",
            "default": {}
          },
          "couplings": {
            "additionalProperties": true,
            "type": "object",
            "title": "Couplings",
            "default": {}
          },
          "installed_at": {
            "type": "string",
            "title": "Installed At",
            "default": ""
          }
        },
        "type": "object",
        "required": [
          "chip_id"
        ],
        "title": "ChipResponse",
        "description": "Chip is a Pydantic model that represents a chip.\n\nAttributes\n----------\n    chip_id (str): The ID of the chip.\n    name (str): The name of the chip."
      },
      "Coupling": {
        "properties": {
          "control": {
            "type": "integer",
            "title": "Control"
          },
          "target": {
            "type": "integer",
            "title": "Target"
          },
          "fidelity": {
            "type": "number",
            "title": "Fidelity"
          },
          "gate_duration": {
            "$ref": "#/components/schemas/CouplingGateDuration"
          }
        },
        "type": "object",
        "required": [
          "control",
          "target",
          "fidelity",
          "gate_duration"
        ],
        "title": "Coupling",
        "description": "Coupling information."
      },
      "CouplingGateDuration": {
        "properties": {
          "rzx90": {
            "type": "integer",
            "title": "Rzx90"
          }
        },
        "type": "object",
        "required": [
          "rzx90"
        ],
        "title": "CouplingGateDuration",
        "description": "Gate duration of the coupling."
      },
      "CreateMenuRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "chip_id": {
            "type": "string",
            "title": "Chip Id"
          },
          "username": {
            "type": "string",
            "title": "Username"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "schedule": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SerialNode"
              },
              {
                "$ref": "#/components/schemas/ParallelNode"
              },
              {
                "$ref": "#/components/schemas/BatchNode"
              }
            ],
            "title": "Schedule"
          },
          "notify_bool": {
            "type": "boolean",
            "title": "Notify Bool",
            "default": false
          },
          "tasks": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tasks"
          },
          "task_details": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Task Details"
          },
          "tags": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tags"
          }
        },
        "type": "object",
        "required": [
          "name",
          "chip_id",
          "username",
          "description",
          "schedule"
        ],
        "title": "CreateMenuRequest",
        "description": "CreateMenuRequest is a Pydantic model for creating a menu item.",
        "example": {
          "batch_mode": false,
          "description": "This is a sample menu item.",
          "name": "CheckOneQubit",
          "notify_bool": false,
          "qids": [
            [
              "28",
              "29"
            ]
          ],
          "tags": [
            "debug"
          ],
          "tasks": [
            "CheckStatus",
            "DumpBox",
            "CheckNoise",
            "CheckRabi",
            "CreateHPIPulse",
            "CheckHPIPulse",
            "CreatePIPulse",
            "CheckPIPulse",
            "CheckT1",
            "CheckT2Echo"
          ],
          "username": "admin"
        }
      },
      "CreateMenuResponse": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "CreateMenuResponse",
        "description": "CreateMenuResponse is a Pydantic model for the create menu response."
      },
      "DeleteMenuResponse": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "DeleteMenuResponse",
        "description": "DeleteMenuResponse is a Pydantic model for the delete menu response."
      },
      "Detail": {
        "properties": {
          "detail": {
            "type": "string",
            "title": "Detail"
          }
        },
        "type": "object",
        "required": [
          "detail"
        ],
        "title": "Detail",
        "description": "A simple message response.\n\nArgs:\n----\n    BaseModel: The base class for Pydantic models.\n\nAttributes:\n----------\n    message (str): The message to return."
      },
      "Device": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "device_id": {
            "type": "string",
            "title": "Device Id"
          },
          "qubits": {
            "items": {
              "$ref": "#/components/schemas/Qubit"
            },
            "type": "array",
            "title": "Qubits"
          },
          "couplings": {
            "items": {
              "$ref": "#/components/schemas/Coupling"
            },
            "type": "array",
            "title": "Couplings"
          },
          "calibrated_at": {
            "type": "string",
            "title": "Calibrated At"
          }
        },
        "type": "object",
        "required": [
          "name",
          "device_id",
          "qubits",
          "couplings",
          "calibrated_at"
        ],
        "title": "Device",
        "description": "Device information."
      },
      "DeviceTopologyRequst": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "default": "anemone"
          },
          "device_id": {
            "type": "string",
            "title": "Device Id",
            "default": "anemone"
          },
          "qubits": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Qubits",
            "default": [
              "0",
              "1",
              "2",
              "3",
              "4",
              "5"
            ]
          },
          "exclude_couplings": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Exclude Couplings",
            "default": []
          },
          "condition": {
            "additionalProperties": true,
            "type": "object",
            "title": "Condition",
            "default": {
              "coupling_fidelity": {
                "max": 1,
                "min": 0.7
              },
              "qubit_fidelity": {
                "max": 1,
                "min": 0.7
              },
              "only_maximum_connected": true
            }
          }
        },
        "type": "object",
        "title": "DeviceTopologyRequst",
        "description": "Request model for device topology."
      },
      "ExecuteCalibRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "chip_id": {
            "type": "string",
            "title": "Chip Id"
          },
          "username": {
            "type": "string",
            "title": "Username"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "schedule": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SerialNode"
              },
              {
                "$ref": "#/components/schemas/ParallelNode"
              },
              {
                "$ref": "#/components/schemas/BatchNode"
              }
            ],
            "title": "Schedule"
          },
          "notify_bool": {
            "type": "boolean",
            "title": "Notify Bool",
            "default": false
          },
          "tasks": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tasks"
          },
          "task_details": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Task Details"
          },
          "tags": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tags"
          }
        },
        "type": "object",
        "required": [
          "name",
          "chip_id",
          "username",
          "description",
          "schedule"
        ],
        "title": "ExecuteCalibRequest",
        "description": "ExecuteCalibRequest is a subclass of MenuModel.",
        "examples": [
          {
            "chip_id": "chip1",
            "description": "check one qubit characteristics short",
            "name": "CheckRabi",
            "notify_bool": false,
            "qids": [
              [
                "28"
              ]
            ],
            "tags": [
              "debug"
            ],
            "task_details": {
              "CheckRabi": {
                "description": "Task to check the Rabi oscillation.",
                "input_parameters": {
                  "interval": {
                    "description": "Time interval for Rabi oscillation",
                    "unit": "ns",
                    "value": 153600,
                    "value_type": "int"
                  },
                  "shots": {
                    "description": "Number of shots for Rabi oscillation",
                    "unit": "a.u.",
                    "value": 1024,
                    "value_type": "int"
                  },
                  "time_range": {
                    "description": "Time range for Rabi oscillation",
                    "unit": "ns",
                    "value": [
                      0,
                      201,
                      4
                    ],
                    "value_type": "range"
                  }
                },
                "name": "CheckRabi",
                "output_parameters": {
                  "rabi_amplitude": {
                    "description": "Rabi oscillation amplitude",
                    "unit": "a.u."
                  },
                  "rabi_frequency": {
                    "description": "Rabi oscillation frequency",
                    "unit": "GHz"
                  }
                },
                "task_type": "qubit",
                "username": "admin"
              }
            },
            "tasks": [
              "CheckRabi"
            ],
            "username": "admin"
          }
        ]
      },
      "ExecuteCalibResponse": {
        "properties": {
          "flow_run_url": {
            "type": "string",
            "title": "Flow Run Url"
          },
          "qdash_ui_url": {
            "type": "string",
            "title": "Qdash Ui Url"
          }
        },
        "type": "object",
        "required": [
          "flow_run_url",
          "qdash_ui_url"
        ],
        "title": "ExecuteCalibResponse",
        "description": "ExecuteCalibResponse is a subclass of BaseModel."
      },
      "ExecutionLockStatusResponse": {
        "properties": {
          "lock": {
            "type": "boolean",
            "title": "Lock"
          }
        },
        "type": "object",
        "required": [
          "lock"
        ],
        "title": "ExecutionLockStatusResponse",
        "description": "Response model for the fetch_execution_lock_status endpoint."
      },
      "ExecutionResponseDetail": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "start_at": {
            "type": "string",
            "title": "Start At"
          },
          "end_at": {
            "type": "string",
            "title": "End At"
          },
          "elapsed_time": {
            "type": "string",
            "title": "Elapsed Time"
          },
          "task": {
            "items": {
              "$ref": "#/components/schemas/Task"
            },
            "type": "array",
            "title": "Task"
          },
          "note": {
            "additionalProperties": true,
            "type": "object",
            "title": "Note"
          }
        },
        "type": "object",
        "required": [
          "name",
          "status",
          "start_at",
          "end_at",
          "elapsed_time",
          "task",
          "note"
        ],
        "title": "ExecutionResponseDetail",
        "description": "ExecutionResponseDetailV2 is a Pydantic model that represents the detail of an execution response.\n\nAttributes\n----------\n    name (str): The name of the execution.\n    status (str): The current status of the execution.\n    start_at (str): The start time"
      },
      "ExecutionResponseSummary": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "execution_id": {
            "type": "string",
            "title": "Execution Id"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "start_at": {
            "type": "string",
            "title": "Start At"
          },
          "end_at": {
            "type": "string",
            "title": "End At"
          },
          "elapsed_time": {
            "type": "string",
            "title": "Elapsed Time"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags"
          },
          "note": {
            "additionalProperties": true,
            "type": "object",
            "title": "Note"
          }
        },
        "type": "object",
        "required": [
          "name",
          "execution_id",
          "status",
          "start_at",
          "end_at",
          "elapsed_time",
          "tags",
          "note"
        ],
        "title": "ExecutionResponseSummary",
        "description": "ExecutionResponseSummaryV2 is a Pydantic model that represents the summary of an execution response.\n\nAttributes\n----------\n    name (str): The name of the execution.\n    status (str): The current status of the execution.\n    start_at (str): The start time of the execution.\n    end_at (str): The end time of the execution.\n    elapsed_time (str): The total elapsed time of the execution."
      },
      "GetMenuResponse": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "chip_id": {
            "type": "string",
            "title": "Chip Id"
          },
          "username": {
            "type": "string",
            "title": "Username"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "schedule": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SerialNode"
              },
              {
                "$ref": "#/components/schemas/ParallelNode"
              },
              {
                "$ref": "#/components/schemas/BatchNode"
              }
            ],
            "title": "Schedule"
          },
          "notify_bool": {
            "type": "boolean",
            "title": "Notify Bool",
            "default": false
          },
          "tasks": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tasks"
          },
          "task_details": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Task Details"
          },
          "tags": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tags"
          }
        },
        "type": "object",
        "required": [
          "name",
          "chip_id",
          "username",
          "description",
          "schedule"
        ],
        "title": "GetMenuResponse",
        "description": "GetMenuResponse is a Pydantic model for the get menu response."
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "InputParameterModel": {
        "properties": {
          "unit": {
            "type": "string",
            "title": "Unit",
            "default": ""
          },
          "value_type": {
            "type": "string",
            "title": "Value Type",
            "default": "float"
          },
          "value": {
            "anyOf": [
              {
                "items": {},
                "type": "array"
              },
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Value"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "default": ""
          }
        },
        "type": "object",
        "title": "InputParameterModel",
        "description": "Input parameter class."
      },
      "LatestTaskGroupedByChipResponse": {
        "properties": {
          "task_name": {
            "type": "string",
            "title": "Task Name"
          },
          "result": {
            "additionalProperties": {
              "$ref": "#/components/schemas/Task"
            },
            "type": "object",
            "title": "Result"
          }
        },
        "type": "object",
        "required": [
          "task_name",
          "result"
        ],
        "title": "LatestTaskGroupedByChipResponse",
        "description": "ChipTaskResponse is a Pydantic model that represents the response for fetching the tasks of a chip."
      },
      "ListCronScheduleResponse": {
        "properties": {
          "schedules": {
            "items": {
              "$ref": "#/components/schemas/ScheduleCronCalibResponse"
            },
            "type": "array",
            "title": "Schedules"
          }
        },
        "type": "object",
        "required": [
          "schedules"
        ],
        "title": "ListCronScheduleResponse",
        "description": "ListCronScheduleResponse is a subclass of BaseModel."
      },
      "ListMenuResponse": {
        "properties": {
          "menus": {
            "items": {
              "$ref": "#/components/schemas/MenuModel"
            },
            "type": "array",
            "title": "Menus"
          }
        },
        "type": "object",
        "required": [
          "menus"
        ],
        "title": "ListMenuResponse",
        "description": "ListMenuResponse is a Pydantic model that represents a menu item."
      },
      "ListMuxResponse": {
        "properties": {
          "muxes": {
            "additionalProperties": {
              "$ref": "#/components/schemas/MuxDetailResponse"
            },
            "type": "object",
            "title": "Muxes"
          }
        },
        "type": "object",
        "required": [
          "muxes"
        ],
        "title": "ListMuxResponse",
        "description": "ListMuxResponse is a Pydantic model that represents the response for fetching the multiplexers."
      },
      "ListParameterResponse": {
        "properties": {
          "parameters": {
            "items": {
              "$ref": "#/components/schemas/ParameterModel"
            },
            "type": "array",
            "title": "Parameters"
          }
        },
        "type": "object",
        "required": [
          "parameters"
        ],
        "title": "ListParameterResponse",
        "description": "Response model for a list of parameters."
      },
      "ListTagResponse": {
        "properties": {
          "tags": {
            "items": {
              "$ref": "#/components/schemas/Tag"
            },
            "type": "array",
            "title": "Tags"
          }
        },
        "type": "object",
        "required": [
          "tags"
        ],
        "title": "ListTagResponse",
        "description": "Response model for a list of tasks."
      },
      "ListTaskResponse": {
        "properties": {
          "tasks": {
            "items": {
              "$ref": "#/components/schemas/TaskResponse"
            },
            "type": "array",
            "title": "Tasks"
          }
        },
        "type": "object",
        "required": [
          "tasks"
        ],
        "title": "ListTaskResponse",
        "description": "Response model for a list of tasks."
      },
      "MeasError": {
        "properties": {
          "prob_meas1_prep0": {
            "type": "number",
            "title": "Prob Meas1 Prep0"
          },
          "prob_meas0_prep1": {
            "type": "number",
            "title": "Prob Meas0 Prep1"
          },
          "readout_assignment_error": {
            "type": "number",
            "title": "Readout Assignment Error"
          }
        },
        "type": "object",
        "required": [
          "prob_meas1_prep0",
          "prob_meas0_prep1",
          "readout_assignment_error"
        ],
        "title": "MeasError",
        "description": "Measurement error of the qubit."
      },
      "MenuModel": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "chip_id": {
            "type": "string",
            "title": "Chip Id"
          },
          "username": {
            "type": "string",
            "title": "Username"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "schedule": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SerialNode"
              },
              {
                "$ref": "#/components/schemas/ParallelNode"
              },
              {
                "$ref": "#/components/schemas/BatchNode"
              }
            ],
            "title": "Schedule"
          },
          "notify_bool": {
            "type": "boolean",
            "title": "Notify Bool",
            "default": false
          },
          "tasks": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tasks"
          },
          "task_details": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Task Details"
          },
          "tags": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tags"
          }
        },
        "type": "object",
        "required": [
          "name",
          "chip_id",
          "username",
          "description",
          "schedule"
        ],
        "title": "MenuModel",
        "description": "Menu model.\n\nAttributes\n----------\n    name (str): The name of the menu.\n    username (str): The username of the user who created\n    description (str): Detailed description of the menu.\n    cal_plan (list[list[int]]): The calibration plan.\n    notify_bool (bool): The notification boolean.\n    tasks (list[str]): The tasks.\n    tags (list[str]): The tags."
      },
      "MuxDetailResponse": {
        "properties": {
          "mux_id": {
            "type": "integer",
            "title": "Mux Id"
          },
          "detail": {
            "additionalProperties": {
              "additionalProperties": {
                "$ref": "#/components/schemas/Task"
              },
              "type": "object"
            },
            "type": "object",
            "title": "Detail"
          }
        },
        "type": "object",
        "required": [
          "mux_id",
          "detail"
        ],
        "title": "MuxDetailResponse",
        "description": "MuxDetailResponse is a Pydantic model that represents the response for fetching the multiplexer details."
      },
      "OutputParameterModel": {
        "properties": {
          "value": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "integer"
              }
            ],
            "title": "Value",
            "default": 0
          },
          "value_type": {
            "type": "string",
            "title": "Value Type",
            "default": "float"
          },
          "error": {
            "type": "number",
            "title": "Error",
            "default": 0
          },
          "unit": {
            "type": "string",
            "title": "Unit",
            "default": ""
          },
          "description": {
            "type": "string",
            "title": "Description",
            "default": ""
          },
          "calibrated_at": {
            "type": "string",
            "title": "Calibrated At",
            "description": "The time when the system information was created"
          },
          "execution_id": {
            "type": "string",
            "title": "Execution Id",
            "default": ""
          }
        },
        "type": "object",
        "title": "OutputParameterModel",
        "description": "Data model.\n\nAttributes\n----------\n    qubit (dict[str, dict[str, float | int]]): The calibration data for qubits.\n    coupling (dict[str, dict[str, float | int]]): The calibration data for couplings."
      },
      "ParallelNode": {
        "properties": {
          "parallel": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/SerialNode"
                },
                {
                  "$ref": "#/components/schemas/ParallelNode"
                },
                {
                  "$ref": "#/components/schemas/BatchNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "type": "array",
            "title": "Parallel"
          }
        },
        "type": "object",
        "required": [
          "parallel"
        ],
        "title": "ParallelNode",
        "description": "Parallel node model."
      },
      "ParameterModel": {
        "properties": {
          "username": {
            "type": "string",
            "title": "Username",
            "description": "The username of the user who created the parameter"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the parameter"
          },
          "unit": {
            "type": "string",
            "title": "Unit",
            "description": "The unit of the parameter",
            "default": ""
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Detailed description of the parameter",
            "default": ""
          }
        },
        "type": "object",
        "required": [
          "username",
          "name"
        ],
        "title": "ParameterModel",
        "description": "Data model for a parameter.\n\nAttributes\n----------\n    name (str): The name of the parameter.\n    unit (str): The unit of the parameter.\n    description (str): Detailed description of the parameter."
      },
      "Position": {
        "properties": {
          "x": {
            "type": "number",
            "title": "X"
          },
          "y": {
            "type": "number",
            "title": "Y"
          }
        },
        "type": "object",
        "required": [
          "x",
          "y"
        ],
        "title": "Position",
        "description": "Position of the qubit on the device."
      },
      "Qubit": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "physical_id": {
            "type": "integer",
            "title": "Physical Id"
          },
          "position": {
            "$ref": "#/components/schemas/Position"
          },
          "fidelity": {
            "type": "number",
            "title": "Fidelity"
          },
          "meas_error": {
            "$ref": "#/components/schemas/MeasError"
          },
          "qubit_lifetime": {
            "$ref": "#/components/schemas/QubitLifetime"
          },
          "gate_duration": {
            "$ref": "#/components/schemas/QubitGateDuration"
          }
        },
        "type": "object",
        "required": [
          "id",
          "physical_id",
          "position",
          "fidelity",
          "meas_error",
          "qubit_lifetime",
          "gate_duration"
        ],
        "title": "Qubit",
        "description": "Qubit information."
      },
      "QubitGateDuration": {
        "properties": {
          "rz": {
            "type": "integer",
            "title": "Rz"
          },
          "sx": {
            "type": "integer",
            "title": "Sx"
          },
          "x": {
            "type": "integer",
            "title": "X"
          }
        },
        "type": "object",
        "required": [
          "rz",
          "sx",
          "x"
        ],
        "title": "QubitGateDuration",
        "description": "Gate duration of the qubit."
      },
      "QubitLifetime": {
        "properties": {
          "t1": {
            "type": "number",
            "title": "T1"
          },
          "t2": {
            "type": "number",
            "title": "T2"
          }
        },
        "type": "object",
        "required": [
          "t1",
          "t2"
        ],
        "title": "QubitLifetime",
        "description": "Qubit lifetime of the qubit."
      },
      "ScheduleCalibRequest": {
        "properties": {
          "menu_name": {
            "type": "string",
            "title": "Menu Name"
          },
          "scheduled": {
            "type": "string",
            "title": "Scheduled"
          }
        },
        "type": "object",
        "required": [
          "menu_name",
          "scheduled"
        ],
        "title": "ScheduleCalibRequest",
        "description": "ScheduleCalibRequest is a subclass of BaseModel."
      },
      "ScheduleCalibResponse": {
        "properties": {
          "menu_name": {
            "type": "string",
            "title": "Menu Name"
          },
          "menu": {
            "$ref": "#/components/schemas/ExecuteCalibRequest"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "note": {
            "type": "string",
            "title": "Note"
          },
          "timezone": {
            "type": "string",
            "title": "Timezone"
          },
          "scheduled_time": {
            "type": "string",
            "title": "Scheduled Time"
          },
          "flow_run_id": {
            "type": "string",
            "title": "Flow Run Id"
          }
        },
        "type": "object",
        "required": [
          "menu_name",
          "menu",
          "description",
          "note",
          "timezone",
          "scheduled_time",
          "flow_run_id"
        ],
        "title": "ScheduleCalibResponse",
        "description": "ScheduleCalibResponse is a subclass of BaseModel."
      },
      "ScheduleCronCalibRequest": {
        "properties": {
          "scheduler_name": {
            "type": "string",
            "title": "Scheduler Name"
          },
          "menu_name": {
            "type": "string",
            "title": "Menu Name"
          },
          "cron": {
            "type": "string",
            "title": "Cron"
          },
          "active": {
            "type": "boolean",
            "title": "Active",
            "default": true
          }
        },
        "type": "object",
        "required": [
          "scheduler_name",
          "menu_name",
          "cron"
        ],
        "title": "ScheduleCronCalibRequest",
        "description": "ScheduleCronCalibRequest is a subclass of BaseModel."
      },
      "ScheduleCronCalibResponse": {
        "properties": {
          "scheduler_name": {
            "type": "string",
            "title": "Scheduler Name"
          },
          "menu_name": {
            "type": "string",
            "title": "Menu Name"
          },
          "cron": {
            "type": "string",
            "title": "Cron"
          },
          "active": {
            "type": "boolean",
            "title": "Active",
            "default": true
          }
        },
        "type": "object",
        "required": [
          "scheduler_name",
          "menu_name",
          "cron"
        ],
        "title": "ScheduleCronCalibResponse",
        "description": "ScheduleCronCalibResponse is a subclass of BaseModel."
      },
      "SerialNode": {
        "properties": {
          "serial": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/SerialNode"
                },
                {
                  "$ref": "#/components/schemas/ParallelNode"
                },
                {
                  "$ref": "#/components/schemas/BatchNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "type": "array",
            "title": "Serial"
          }
        },
        "type": "object",
        "required": [
          "serial"
        ],
        "title": "SerialNode",
        "description": "Serial node model."
      },
      "Settings": {
        "properties": {
          "env": {
            "type": "string",
            "title": "Env"
          },
          "client_url": {
            "type": "string",
            "title": "Client Url"
          },
          "prefect_api_url": {
            "type": "string",
            "title": "Prefect Api Url"
          },
          "slack_bot_token": {
            "type": "string",
            "title": "Slack Bot Token"
          },
          "slack_channel_id": {
            "type": "string",
            "title": "Slack Channel Id"
          },
          "postgres_data_path": {
            "type": "string",
            "title": "Postgres Data Path"
          },
          "mongo_data_path": {
            "type": "string",
            "title": "Mongo Data Path"
          },
          "calib_data_path": {
            "type": "string",
            "title": "Calib Data Path"
          },
          "qpu_data_path": {
            "type": "string",
            "title": "Qpu Data Path"
          },
          "mongo_port": {
            "type": "integer",
            "title": "Mongo Port",
            "default": 27017
          },
          "mongo_express_port": {
            "type": "integer",
            "title": "Mongo Express Port",
            "default": 8081
          },
          "postgres_port": {
            "type": "integer",
            "title": "Postgres Port",
            "default": 5432
          },
          "prefect_port": {
            "type": "integer",
            "title": "Prefect Port",
            "default": 4200
          },
          "api_port": {
            "type": "integer",
            "title": "Api Port",
            "default": 5715
          },
          "ui_port": {
            "type": "integer",
            "title": "Ui Port",
            "default": 5714
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "env",
          "client_url",
          "prefect_api_url",
          "slack_bot_token",
          "slack_channel_id",
          "postgres_data_path",
          "mongo_data_path",
          "calib_data_path",
          "qpu_data_path"
        ],
        "title": "Settings",
        "description": "Settings for the QDash application."
      },
      "Tag": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "Tag",
        "description": "Response model for a task."
      },
      "Task": {
        "properties": {
          "task_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Task Id"
          },
          "qid": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Qid"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "default": ""
          },
          "upstream_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Upstream Id"
          },
          "status": {
            "type": "string",
            "title": "Status",
            "default": "pending"
          },
          "message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Message"
          },
          "input_parameters": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Input Parameters"
          },
          "output_parameters": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Output Parameters"
          },
          "output_parameter_names": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Output Parameter Names"
          },
          "note": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Note"
          },
          "figure_path": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Figure Path"
          },
          "raw_data_path": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Raw Data Path"
          },
          "start_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Start At"
          },
          "end_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "End At"
          },
          "elapsed_time": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Elapsed Time"
          },
          "task_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Task Type"
          }
        },
        "type": "object",
        "title": "Task",
        "description": "Task is a Pydantic model that represents a task."
      },
      "TaskResponse": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "task_type": {
            "type": "string",
            "title": "Task Type"
          },
          "input_parameters": {
            "additionalProperties": {
              "$ref": "#/components/schemas/InputParameterModel"
            },
            "type": "object",
            "title": "Input Parameters"
          },
          "output_parameters": {
            "additionalProperties": {
              "$ref": "#/components/schemas/InputParameterModel"
            },
            "type": "object",
            "title": "Output Parameters"
          }
        },
        "type": "object",
        "required": [
          "name",
          "description",
          "task_type",
          "input_parameters",
          "output_parameters"
        ],
        "title": "TaskResponse",
        "description": "Response model for a task."
      },
      "TimeSeriesData": {
        "properties": {
          "data": {
            "additionalProperties": {
              "items": {
                "$ref": "#/components/schemas/OutputParameterModel"
              },
              "type": "array"
            },
            "type": "object",
            "title": "Data",
            "default": {}
          }
        },
        "type": "object",
        "title": "TimeSeriesData",
        "description": "TimeSeriesData is a Pydantic model that represents the time series data."
      },
      "Token": {
        "properties": {
          "access_token": {
            "type": "string",
            "title": "Access Token"
          },
          "token_type": {
            "type": "string",
            "title": "Token Type"
          }
        },
        "type": "object",
        "required": [
          "access_token",
          "token_type"
        ],
        "title": "Token"
      },
      "UpdateMenuRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "chip_id": {
            "type": "string",
            "title": "Chip Id"
          },
          "username": {
            "type": "string",
            "title": "Username"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "schedule": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SerialNode"
              },
              {
                "$ref": "#/components/schemas/ParallelNode"
              },
              {
                "$ref": "#/components/schemas/BatchNode"
              }
            ],
            "title": "Schedule"
          },
          "notify_bool": {
            "type": "boolean",
            "title": "Notify Bool",
            "default": false
          },
          "tasks": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tasks"
          },
          "task_details": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Task Details"
          },
          "tags": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tags"
          }
        },
        "type": "object",
        "required": [
          "name",
          "chip_id",
          "username",
          "description",
          "schedule"
        ],
        "title": "UpdateMenuRequest",
        "description": "UpdateMenuRequest is a Pydantic model for updating a menu item."
      },
      "UpdateMenuResponse": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "UpdateMenuResponse",
        "description": "UpdateMenuResponse is a Pydantic model for the update menu response."
      },
      "User": {
        "properties": {
          "username": {
            "type": "string",
            "title": "Username"
          },
          "full_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Full Name"
          },
          "disabled": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Disabled"
          }
        },
        "type": "object",
        "required": [
          "username"
        ],
        "title": "User"
      },
      "UserCreate": {
        "properties": {
          "username": {
            "type": "string",
            "title": "Username"
          },
          "password": {
            "type": "string",
            "title": "Password"
          },
          "full_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Full Name"
          }
        },
        "type": "object",
        "required": [
          "username",
          "password"
        ],
        "title": "UserCreate"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    },
    "securitySchemes": {
      "APIKeyHeader": {
        "type": "apiKey",
        "in": "header",
        "name": "X-Username"
      }
    }
  }
}
