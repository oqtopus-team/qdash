{
  "openapi": "3.1.0",
  "info": {
    "title": "QDash Server",
    "summary": "QDash API",
    "description": "API for QDash",
    "contact": {
      "name": "QDash",
      "email": "oqtopus-team@googlegroups.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "0.0.1"
  },
  "paths": {
    "/calibration/": {
      "post": {
        "tags": [
          "calibration"
        ],
        "summary": "Executes a calibration by creating a flow run from a deployment.",
        "description": "Executes a calibration by creating a flow run from a deployment.\n\nArgs:\n----\n    request (ExecuteCalibRequest): The request object containing the calibration data.\n    settings (Settings): The application settings.\n\nReturns:\n-------\n    FLOW_RUN_URL: The URL of the created flow run.\n\nRaises:\n------\n    HTTPException: If the execution of the calibration fails.",
        "operationId": "execute_calib",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExecuteCalibRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExecuteCalibResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/calibration/schedule": {
      "get": {
        "tags": [
          "calibration"
        ],
        "summary": "Fetches all the calibration schedules.",
        "operationId": "fetch_all_calib_schedule",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ScheduleCalibResponse"
                  },
                  "type": "array",
                  "title": "Response Fetch All Calib Schedule"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "calibration"
        ],
        "summary": "Schedules a calibration.",
        "operationId": "schedule_calib",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScheduleCalibRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/calibration/schedule/{flow_run_id}": {
      "delete": {
        "tags": [
          "calibration"
        ],
        "summary": "Deletes a calibration schedule.",
        "operationId": "delete_calib_schedule",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "flow_run_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Flow Run Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/menu": {
      "get": {
        "tags": [
          "menu"
        ],
        "summary": "Retrieve a list of menu items.",
        "description": "Retrieve a list of menu items.\n\nReturns\n-------\n    ListMenuResponse: A response containing the list of menu items.",
        "operationId": "list_menu",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListMenuResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "menu"
        ],
        "summary": "Create a new menu item.",
        "description": "Create a new menu item.\n\nArgs:\n----\n    request (CreateMenuRequest): The request object containing the menu item details.\n    current_user (User): The current authenticated user.\n\nReturns:\n-------\n    CreateMenuResponse: The response object containing the name of the created menu item.",
        "operationId": "create_menu",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMenuRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateMenuResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/menu/{name}": {
      "delete": {
        "tags": [
          "menu"
        ],
        "summary": "Delete a menu by its name.",
        "description": "Delete a menu by its name.\n\nArgs:\n----\n    name (str): The name of the menu to be deleted.\n    current_user (User): The current authenticated user.\n\nReturns:\n-------\n    DeleteMenuResponse | NotFoundErrorResponse: The response indicating the success or failure of the deletion.",
        "operationId": "delete_menu",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteMenuResponse"
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Detail"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "menu"
        ],
        "summary": "Update a menu with the given name.",
        "description": "Update a menu with the given name.\n\nArgs:\n----\n    name (str): The name of the menu to update.\n    req (UpdateMenuRequest): The request object containing the updated menu data.\n    current_user (User): The current authenticated user.\n\nReturns:\n-------\n    Union[UpdateMenuResponse, NotFoundErrorResponse]: The response object indicating the success of the update or an error if the menu is not found.",
        "operationId": "update_menu",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Name"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMenuRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateMenuResponse"
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Detail"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "menu"
        ],
        "summary": "Retrieve a menu by its name.",
        "description": "Retrieve a menu by its name.\n\nArgs:\n----\n    name (str): The name of the menu.\n    current_user (User): The current authenticated user.\n\nReturns:\n-------\n    GetMenuResponse: The response containing the menu details.\n\nRaises:\n------\n    InternalServerError: If there is an error retrieving the menu.\n    NotFoundErrorResponse: If the menu is not found.",
        "operationId": "get_menu_by_name",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMenuResponse"
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Detail"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/qpu/figure": {
      "get": {
        "tags": [
          "qpu"
        ],
        "summary": "Fetches a calibration figure by its path",
        "operationId": "fetch_qpu_figure_by_path",
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Path"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Detail"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/qpu/info/{name}": {
      "get": {
        "tags": [
          "qpu"
        ],
        "summary": "Fetchqpuinfo",
        "operationId": "fetch_qpu_info",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QPUInfoResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/qpu": {
      "get": {
        "tags": [
          "qpu"
        ],
        "summary": "List Qpu",
        "operationId": "list_qpu",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/QPUInfoResponse"
                  },
                  "type": "array",
                  "title": "Response List Qpu"
                }
              }
            }
          }
        }
      }
    },
    "/qpu/active": {
      "get": {
        "tags": [
          "qpu"
        ],
        "summary": "Fetch Active Qpu",
        "operationId": "fetch_active_qpu",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QPUInfoResponse"
                }
              }
            }
          }
        }
      }
    },
    "/qpu/{name}": {
      "get": {
        "tags": [
          "qpu"
        ],
        "summary": "Fetch Qpu By Name",
        "operationId": "fetch_qpu",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QPUInfoResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/qpu/{name}/executions": {
      "get": {
        "tags": [
          "qpu"
        ],
        "summary": "Fetch all executions",
        "operationId": "fetch_all_executions_by_qpu_name",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExecutionRunResponse"
                  },
                  "title": "Response Fetch All Executions By Qpu Name"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/qpu/{name}/one_qubit_calib/nodes": {
      "get": {
        "tags": [
          "qpu"
        ],
        "summary": "Fetch One Qubit Calib By Qpu Name",
        "operationId": "fetch_one_qubit_calib_by_qpu_name",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Name"
            }
          },
          {
            "name": "param_list[]",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "Param List[]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OneQubitCalibResponse"
                  },
                  "title": "Response Fetch One Qubit Calib By Qpu Name"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/qpu/{name}/one_qubit_calib/nodes/{label}": {
      "get": {
        "tags": [
          "qpu"
        ],
        "summary": "Fetch One Qubit Calib By Label",
        "operationId": "fetch_one_qubit_calib_by_label",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Name"
            }
          },
          {
            "name": "label",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Label"
            }
          },
          {
            "name": "param_list[]",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "Param List[]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OneQubitCalibResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/qpu/{name}/one_qubit_calib/params/{param_name}": {
      "get": {
        "tags": [
          "qpu"
        ],
        "summary": "Fetch One Qubit Calib By Param Name",
        "operationId": "fetch_one_qubit_calib_by_param_name",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Name"
            }
          },
          {
            "name": "param_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Param Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParamResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/qpu/{name}/history/one_qubit_calib/{param_name}": {
      "get": {
        "tags": [
          "qpu"
        ],
        "summary": "Fetch One Qubit Calib History By Param Name",
        "operationId": "fetch_one_qubit_calib_history_by_param_name",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Name"
            }
          },
          {
            "name": "param_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Param Name"
            }
          },
          {
            "name": "tags[]",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "Tags[]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/qpu/{name}/two_qubit_calib/edges": {
      "get": {
        "tags": [
          "qpu"
        ],
        "summary": "Fetch Two Qubit Calib By Qpu Name",
        "operationId": "fetch_two_qubit_calib_by_qpu_name",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TwoQubitCalibResponse"
                  },
                  "title": "Response Fetch Two Qubit Calib By Qpu Name"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/qpu/{name}/two_qubit_calib/edges/{label}": {
      "get": {
        "tags": [
          "qpu"
        ],
        "summary": "Fetch Two Qubit Calib By Label",
        "operationId": "fetch_two_qubit_calib_by_label",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Name"
            }
          },
          {
            "name": "label",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Label"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TwoQubitCalibResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/qpu/{name}/two_qubit_calib/params/{param_name}": {
      "get": {
        "tags": [
          "qpu"
        ],
        "summary": "Fetch Two Qubit Calib By Param Name",
        "operationId": "fetch_two_qubit_calib_by_param_name",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Name"
            }
          },
          {
            "name": "param_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Param Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParamResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/qpu/{name}/stats": {
      "get": {
        "tags": [
          "qpu"
        ],
        "summary": "Fetch QPU stats by name",
        "operationId": "fetch_qpu_stats_by_name",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QPUStatsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/settings": {
      "get": {
        "tags": [
          "settings"
        ],
        "summary": "Get settings",
        "description": "Get settings from the server",
        "operationId": "fetch_config",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Settings"
                }
              }
            }
          }
        }
      }
    },
    "/fridges/": {
      "get": {
        "tags": [
          "fridges"
        ],
        "summary": "List All Fridges",
        "operationId": "fridges-list_all_fridges",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListAllFridgeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/fridges/XLD/channels/{channel}": {
      "get": {
        "tags": [
          "fridges"
        ],
        "summary": "Get Fridge Temperature",
        "operationId": "fridges-get_fridge_temperature",
        "parameters": [
          {
            "name": "channel",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Channel"
            }
          },
          {
            "name": "h",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 12,
              "title": "H"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListFridgeResponse"
                  },
                  "title": "Response Fridges-Get Fridge Temperature"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/executions": {
      "get": {
        "tags": [
          "execution"
        ],
        "summary": "Fetch all executions",
        "operationId": "fetch_all_executions",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ExecutionRunResponse"
                  },
                  "type": "array",
                  "title": "Response Fetch All Executions"
                }
              }
            }
          }
        }
      }
    },
    "/executions/{execution_id}/experiments": {
      "get": {
        "tags": [
          "execution"
        ],
        "summary": "Fetch an execution by its ID",
        "operationId": "fetch_experiments_by_id",
        "parameters": [
          {
            "name": "execution_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Execution Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExecutionResponse"
                  },
                  "title": "Response Fetch Experiments By Id"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/executions/{execution_id}/tags": {
      "post": {
        "tags": [
          "execution"
        ],
        "summary": "Add tags to an execution",
        "operationId": "add_execution_tags",
        "parameters": [
          {
            "name": "execution_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Execution Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "title": "Tags"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "execution"
        ],
        "summary": "Remove tags from an execution",
        "operationId": "remove_execution_tags",
        "parameters": [
          {
            "name": "execution_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Execution Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "title": "Tags"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/executions/experiments": {
      "get": {
        "tags": [
          "execution"
        ],
        "summary": "Fetch all executions",
        "operationId": "fetch_all_executions_experiments",
        "parameters": [
          {
            "name": "label[]",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "Label[]"
            }
          },
          {
            "name": "experiment_name[]",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "Experiment Name[]"
            }
          },
          {
            "name": "execution_id[]",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "Execution Id[]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExecutionResponse"
                  },
                  "title": "Response Fetch All Executions Experiments"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/executions/figure": {
      "get": {
        "tags": [
          "execution"
        ],
        "summary": "Fetches a calibration figure by its path",
        "operationId": "fetch_figure_by_path",
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Path"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Detail"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/executions/lock_status": {
      "get": {
        "tags": [
          "execution"
        ],
        "summary": "Fetches the status of a calibration.",
        "operationId": "fetch_execution_lock_status",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExecutionLockStatusResponse"
                }
              }
            }
          }
        }
      }
    },
    "/experiments": {
      "get": {
        "tags": [
          "experiment"
        ],
        "summary": "Fetch all experiments",
        "operationId": "fetch_all_experiment",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ExperimentResponse"
                  },
                  "type": "array",
                  "title": "Response Fetch All Experiment"
                }
              }
            }
          }
        }
      }
    },
    "/v2/execution": {
      "get": {
        "tags": [
          "executionV2"
        ],
        "summary": "Fetch executions",
        "description": "Fetch all executions.",
        "operationId": "fetchExecutionsV2",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ExecutionResponseSummaryV2"
                  },
                  "type": "array",
                  "title": "Response Fetchexecutionsv2"
                }
              }
            }
          }
        }
      }
    },
    "/v2/execution/{execution_id}": {
      "get": {
        "tags": [
          "executionV2"
        ],
        "summary": "Fetch an execution by its ID",
        "description": "Return the execution detail by its ID.",
        "operationId": "fetchExecutionByIdV2",
        "parameters": [
          {
            "name": "execution_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Execution Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExecutionResponseDetailV2"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/chip": {
      "get": {
        "tags": [
          "chip"
        ],
        "summary": "Fetch all chips",
        "description": "Fetch all chips.\n\nParameters\n----------\ncurrent_user : User\n    Current authenticated user\n\nReturns\n-------\nlist[ChipResponse]\n    List of available chips",
        "operationId": "listChips",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ChipResponse"
                  },
                  "type": "array",
                  "title": "Response Listchips"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/chip/{chip_id}": {
      "get": {
        "tags": [
          "chip"
        ],
        "summary": "Fetch a chip",
        "description": "Fetch a chip by its ID.\n\nParameters\n----------\nchip_id : str\n    ID of the chip to fetch\ncurrent_user_id : str\n    Current user ID from authentication\n\nReturns\n-------\nChipResponse\n    Chip information",
        "operationId": "fetchChip",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "chip_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Chip Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChipResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/chip/{chip_id}/execution": {
      "get": {
        "tags": [
          "chip"
        ],
        "summary": "Fetch executions",
        "description": "Fetch all executions for a given chip.\n\nParameters\n----------\nchip_id : str\n    ID of the chip to fetch executions for\ncurrent_user : str\n    Current user ID from authentication\n\nReturns\n-------\nlist[ExecutionResponseSummary]\n    List of executions for the chip",
        "operationId": "listExecutionsByChipId",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "chip_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Chip Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExecutionResponseSummary"
                  },
                  "title": "Response Listexecutionsbychipid"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/chip/{chip_id}/execution/{execution_id}": {
      "get": {
        "tags": [
          "chip"
        ],
        "summary": "Fetch an execution by its ID",
        "description": "Return the execution detail by its ID.\n\nParameters\n----------\nchip_id : str\n    ID of the chip\nexecution_id : str\n    ID of the execution to fetch\ncurrent_user_id : str\n    Current user ID from authentication\n\nReturns\n-------\nExecutionResponseDetail\n    Detailed execution information",
        "operationId": "fetchExecutionByChipId",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "chip_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Chip Id"
            }
          },
          {
            "name": "execution_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Execution Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExecutionResponseDetail"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/chip/{chip_id}/mux/{mux_id}": {
      "get": {
        "tags": [
          "chip"
        ],
        "summary": "Fetch the multiplexer details",
        "description": "Fetch the multiplexer details.\n\nParameters\n----------\nchip_id : str\n    ID of the chip\nmux_id : int\n    ID of the multiplexer\ncurrent_user : User\n    Current authenticated user\n\nReturns\n-------\nMuxDetailResponse\n    Multiplexer details",
        "operationId": "fetchMuxDetails",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "chip_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Chip Id"
            }
          },
          {
            "name": "mux_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Mux Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MuxDetailResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/chip/{chip_id}/mux": {
      "get": {
        "tags": [
          "chip"
        ],
        "summary": "Fetch the multiplexers",
        "description": "Fetch the multiplexers.\n\nParameters\n----------\nchip_id : str\n    ID of the chip\ncurrent_user : User\n    Current authenticated user\n\nReturns\n-------\nListMuxResponse\n    Multiplexdetails",
        "operationId": "listMuxes",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "chip_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Chip Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListMuxResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/chip/{chip_id}/task/{task_name}": {
      "get": {
        "tags": [
          "chip"
        ],
        "summary": "Fetch the multiplexers",
        "description": "Fetch the multiplexers.",
        "operationId": "fetchLatestTaskGroupedByChip",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "chip_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Chip Id"
            }
          },
          {
            "name": "task_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Task Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LatestTaskGroupedByChipResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/file/raw_data": {
      "get": {
        "tags": [
          "file"
        ],
        "summary": "download file",
        "description": "Download a file.",
        "operationId": "downloadFile",
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Path"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/auth/token": {
      "post": {
        "tags": [
          "auth",
          "authentication",
          "authentication"
        ],
        "summary": "Login For Access Token",
        "operationId": "auth-login_for_access_token",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Body_auth-login_for_access_token",
                "properties": {
                  "username": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  },
                  "grant_type": {
                    "type": "string",
                    "default": "password"
                  }
                },
                "type": "object",
                "required": [
                  "username",
                  "password"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/auth/register": {
      "post": {
        "tags": [
          "auth",
          "authentication",
          "authentication"
        ],
        "summary": "Register User",
        "operationId": "auth-register_user",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/auth/me": {
      "get": {
        "tags": [
          "auth",
          "authentication",
          "authentication"
        ],
        "summary": "Read Users Me",
        "operationId": "auth-read_users_me",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "auth",
          "authentication",
          "authentication"
        ],
        "summary": "Logout",
        "description": "Logout endpoint.\n\nThis endpoint doesn't need to do anything on the backend since the token is managed client-side.\nThe client will remove the token from cookies.",
        "operationId": "auth-logout",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/tasks": {
      "get": {
        "tags": [
          "task"
        ],
        "summary": "Fetch all tasks",
        "description": "Fetch all tasks.\n\nArgs:\n----\n    current_user (User): The current user.\n\nReturns:\n-------\n    list[TaskResponse]: The list of tasks.",
        "operationId": "fetch_all_tasks",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListTaskResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Body_auth-login_for_access_token": {
        "properties": {
          "username": {
            "type": "string",
            "title": "Username"
          },
          "password": {
            "type": "string",
            "title": "Password"
          },
          "grant_type": {
            "type": "string",
            "title": "Grant Type",
            "default": "password"
          }
        },
        "type": "object",
        "required": [
          "username",
          "password"
        ],
        "title": "Body_auth-login_for_access_token"
      },
      "ChipResponse": {
        "properties": {
          "chip_id": {
            "type": "string",
            "title": "Chip Id"
          },
          "size": {
            "type": "integer",
            "title": "Size",
            "default": 64
          },
          "qubits": {
            "type": "object",
            "title": "Qubits",
            "default": {}
          },
          "couplings": {
            "type": "object",
            "title": "Couplings",
            "default": {}
          }
        },
        "type": "object",
        "required": [
          "chip_id"
        ],
        "title": "ChipResponse",
        "description": "Chip is a Pydantic model that represents a chip.\n\nAttributes\n----------\n    chip_id (str): The ID of the chip.\n    name (str): The name of the chip."
      },
      "CreateMenuRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "username": {
            "type": "string",
            "title": "Username"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "qids": {
            "items": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "type": "array",
            "title": "Qids"
          },
          "notify_bool": {
            "type": "boolean",
            "title": "Notify Bool",
            "default": false
          },
          "tasks": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tasks"
          },
          "task_details": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Task Details"
          },
          "tags": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tags"
          }
        },
        "type": "object",
        "required": [
          "name",
          "username",
          "description",
          "qids"
        ],
        "title": "CreateMenuRequest",
        "description": "CreateMenuRequest is a Pydantic model for creating a menu item.",
        "example": {
          "description": "This is a sample menu item.",
          "name": "CheckOneQubit",
          "notify_bool": false,
          "qids": [
            [
              "28",
              "29"
            ]
          ],
          "tags": [
            "debug"
          ],
          "tasks": [
            "CheckStatus",
            "DumpBox",
            "CheckNoise",
            "CheckRabi",
            "CreateHPIPulse",
            "CheckHPIPulse",
            "CreatePIPulse",
            "CheckPIPulse",
            "CheckT1",
            "CheckT2Echo"
          ],
          "username": "admin"
        }
      },
      "CreateMenuResponse": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "CreateMenuResponse",
        "description": "CreateMenuResponse is a Pydantic model for the create menu response."
      },
      "Data": {
        "properties": {
          "value": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "items": {},
                "type": "array"
              },
              {
                "items": {
                  "items": {},
                  "type": "array"
                },
                "type": "array"
              }
            ],
            "title": "Value"
          },
          "unit": {
            "type": "string",
            "title": "Unit"
          },
          "type": {
            "type": "string",
            "title": "Type"
          }
        },
        "type": "object",
        "required": [
          "value",
          "unit",
          "type"
        ],
        "title": "Data"
      },
      "DeleteMenuResponse": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "DeleteMenuResponse",
        "description": "DeleteMenuResponse is a Pydantic model for the delete menu response."
      },
      "Detail": {
        "properties": {
          "detail": {
            "type": "string",
            "title": "Detail"
          }
        },
        "type": "object",
        "required": [
          "detail"
        ],
        "title": "Detail",
        "description": "A simple message response.\n\nArgs:\n    BaseModel: The base class for Pydantic models.\n\nAttributes:\n    message (str): The message to return."
      },
      "EdgeInfo": {
        "properties": {
          "source": {
            "type": "string",
            "title": "Source"
          },
          "target": {
            "type": "string",
            "title": "Target"
          },
          "size": {
            "type": "integer",
            "title": "Size"
          },
          "fill": {
            "type": "string",
            "title": "Fill"
          }
        },
        "type": "object",
        "required": [
          "source",
          "target",
          "size",
          "fill"
        ],
        "title": "EdgeInfo"
      },
      "ExecuteCalibRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "username": {
            "type": "string",
            "title": "Username"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "qids": {
            "items": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "type": "array",
            "title": "Qids"
          },
          "notify_bool": {
            "type": "boolean",
            "title": "Notify Bool",
            "default": false
          },
          "tasks": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tasks"
          },
          "tags": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tags"
          }
        },
        "type": "object",
        "required": [
          "name",
          "username",
          "description",
          "qids"
        ],
        "title": "ExecuteCalibRequest",
        "description": "Menu model.\n\nAttributes\n----------\n    name (str): The name of the menu.\n    username (str): The username of the user who created\n    description (str): Detailed description of the menu.\n    qids (list[list[str]]): The qubit IDs.\n    notify_bool (bool): The notification boolean.\n    tasks (list[str]): The tasks.\n    tags (list[str]): The tags.",
        "examples": [
          {
            "description": "one qubit calibration for mock demo",
            "name": "1Q-MOCK-DEMO",
            "notify_bool": false,
            "qids": [
              [
                "Q1"
              ],
              [
                "Q2",
                "Q3"
              ]
            ],
            "tags": [
              "calibration",
              "demo"
            ],
            "tasks": [
              "task1",
              "task2"
            ],
            "username": "default-user"
          }
        ]
      },
      "ExecuteCalibResponse": {
        "properties": {
          "flow_run_url": {
            "type": "string",
            "title": "Flow Run Url"
          }
        },
        "type": "object",
        "required": [
          "flow_run_url"
        ],
        "title": "ExecuteCalibResponse"
      },
      "ExecutionLockStatusResponse": {
        "properties": {
          "lock": {
            "type": "boolean",
            "title": "Lock"
          }
        },
        "type": "object",
        "required": [
          "lock"
        ],
        "title": "ExecutionLockStatusResponse"
      },
      "ExecutionResponse": {
        "properties": {
          "experiment_name": {
            "type": "string",
            "title": "Experiment Name"
          },
          "label": {
            "type": "string",
            "title": "Label"
          },
          "status": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Status"
          },
          "timestamp": {
            "type": "string",
            "title": "Timestamp"
          },
          "input_parameter": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Input Parameter"
          },
          "output_parameter": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Output Parameter"
          },
          "fig_path": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Fig Path"
          }
        },
        "type": "object",
        "required": [
          "experiment_name",
          "label",
          "timestamp"
        ],
        "title": "ExecutionResponse"
      },
      "ExecutionResponseDetail": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "start_at": {
            "type": "string",
            "title": "Start At"
          },
          "end_at": {
            "type": "string",
            "title": "End At"
          },
          "elapsed_time": {
            "type": "string",
            "title": "Elapsed Time"
          },
          "task": {
            "items": {
              "$ref": "#/components/schemas/server__routers__chip__Task"
            },
            "type": "array",
            "title": "Task"
          },
          "note": {
            "type": "object",
            "title": "Note"
          }
        },
        "type": "object",
        "required": [
          "name",
          "status",
          "start_at",
          "end_at",
          "elapsed_time",
          "task",
          "note"
        ],
        "title": "ExecutionResponseDetail",
        "description": "ExecutionResponseDetailV2 is a Pydantic model that represents the detail of an execution response.\n\nAttributes\n----------\n    name (str): The name of the execution.\n    status (str): The current status of the execution.\n    start_at (str): The start time"
      },
      "ExecutionResponseDetailV2": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "start_at": {
            "type": "string",
            "title": "Start At"
          },
          "end_at": {
            "type": "string",
            "title": "End At"
          },
          "elapsed_time": {
            "type": "string",
            "title": "Elapsed Time"
          },
          "task": {
            "items": {
              "$ref": "#/components/schemas/server__routers__execution_v2__Task"
            },
            "type": "array",
            "title": "Task"
          }
        },
        "type": "object",
        "required": [
          "name",
          "status",
          "start_at",
          "end_at",
          "elapsed_time",
          "task"
        ],
        "title": "ExecutionResponseDetailV2",
        "description": "ExecutionResponseDetailV2 is a Pydantic model that represents the detail of an execution response.\n\nAttributes\n----------\n    name (str): The name of the execution.\n    status (str): The current status of the execution.\n    start_at (str): The start time"
      },
      "ExecutionResponseSummary": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "execution_id": {
            "type": "string",
            "title": "Execution Id"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "start_at": {
            "type": "string",
            "title": "Start At"
          },
          "end_at": {
            "type": "string",
            "title": "End At"
          },
          "elapsed_time": {
            "type": "string",
            "title": "Elapsed Time"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags"
          },
          "note": {
            "type": "object",
            "title": "Note"
          }
        },
        "type": "object",
        "required": [
          "name",
          "execution_id",
          "status",
          "start_at",
          "end_at",
          "elapsed_time",
          "tags",
          "note"
        ],
        "title": "ExecutionResponseSummary",
        "description": "ExecutionResponseSummaryV2 is a Pydantic model that represents the summary of an execution response.\n\nAttributes\n----------\n    name (str): The name of the execution.\n    status (str): The current status of the execution.\n    start_at (str): The start time of the execution.\n    end_at (str): The end time of the execution.\n    elapsed_time (str): The total elapsed time of the execution."
      },
      "ExecutionResponseSummaryV2": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "execution_id": {
            "type": "string",
            "title": "Execution Id"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "start_at": {
            "type": "string",
            "title": "Start At"
          },
          "end_at": {
            "type": "string",
            "title": "End At"
          },
          "elapsed_time": {
            "type": "string",
            "title": "Elapsed Time"
          }
        },
        "type": "object",
        "required": [
          "name",
          "execution_id",
          "status",
          "start_at",
          "end_at",
          "elapsed_time"
        ],
        "title": "ExecutionResponseSummaryV2",
        "description": "ExecutionResponseSummaryV2 is a Pydantic model that represents the summary of an execution response.\n\nAttributes\n----------\n    name (str): The name of the execution.\n    status (str): The current status of the execution.\n    start_at (str): The start time of the execution.\n    end_at (str): The end time of the execution.\n    elapsed_time (str): The total elapsed time of the execution."
      },
      "ExecutionRunResponse": {
        "properties": {
          "timestamp": {
            "type": "string",
            "title": "Timestamp"
          },
          "date": {
            "type": "string",
            "title": "Date"
          },
          "status": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Status"
          },
          "execution_id": {
            "type": "string",
            "title": "Execution Id"
          },
          "menu": {
            "type": "object",
            "title": "Menu"
          },
          "tags": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tags"
          },
          "qpu_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Qpu Name"
          },
          "fridge_temperature": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Fridge Temperature"
          },
          "flow_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Flow Url"
          }
        },
        "type": "object",
        "required": [
          "timestamp",
          "date",
          "execution_id",
          "menu"
        ],
        "title": "ExecutionRunResponse"
      },
      "ExperimentResponse": {
        "properties": {
          "experiment_name": {
            "type": "string",
            "title": "Experiment Name"
          },
          "updated_at": {
            "type": "string",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "experiment_name",
          "updated_at"
        ],
        "title": "ExperimentResponse"
      },
      "GetMenuResponse": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "username": {
            "type": "string",
            "title": "Username"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "qids": {
            "items": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "type": "array",
            "title": "Qids"
          },
          "notify_bool": {
            "type": "boolean",
            "title": "Notify Bool",
            "default": false
          },
          "tasks": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tasks"
          },
          "task_details": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Task Details"
          },
          "tags": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tags"
          }
        },
        "type": "object",
        "required": [
          "name",
          "username",
          "description",
          "qids"
        ],
        "title": "GetMenuResponse",
        "description": "GetMenuResponse is a Pydantic model for the get menu response."
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "InputParameter": {
        "properties": {
          "unit": {
            "type": "string",
            "title": "Unit",
            "default": ""
          },
          "value_type": {
            "type": "string",
            "title": "Value Type",
            "default": "float"
          },
          "value": {
            "anyOf": [
              {
                "items": {},
                "type": "array"
              },
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Value"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "default": ""
          }
        },
        "type": "object",
        "title": "InputParameter",
        "description": "Input parameter class."
      },
      "LatestTaskGroupedByChipResponse": {
        "properties": {
          "task_name": {
            "type": "string",
            "title": "Task Name"
          },
          "result": {
            "additionalProperties": {
              "$ref": "#/components/schemas/server__routers__chip__Task"
            },
            "type": "object",
            "title": "Result"
          }
        },
        "type": "object",
        "required": [
          "task_name",
          "result"
        ],
        "title": "LatestTaskGroupedByChipResponse",
        "description": "ChipTaskResponse is a Pydantic model that represents the response for fetching the tasks of a chip."
      },
      "ListAllFridgeResponse": {
        "properties": {
          "device_id": {
            "type": "string",
            "title": "Device Id"
          }
        },
        "type": "object",
        "required": [
          "device_id"
        ],
        "title": "ListAllFridgeResponse"
      },
      "ListFridgeResponse": {
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp"
          },
          "temperature": {
            "type": "number",
            "title": "Temperature"
          }
        },
        "type": "object",
        "required": [
          "timestamp",
          "temperature"
        ],
        "title": "ListFridgeResponse"
      },
      "ListMenuResponse": {
        "properties": {
          "menus": {
            "items": {
              "$ref": "#/components/schemas/MenuModel"
            },
            "type": "array",
            "title": "Menus"
          }
        },
        "type": "object",
        "required": [
          "menus"
        ],
        "title": "ListMenuResponse",
        "description": "ListMenuResponse is a Pydantic model that represents a menu item."
      },
      "ListMuxResponse": {
        "properties": {
          "muxes": {
            "additionalProperties": {
              "$ref": "#/components/schemas/MuxDetailResponse"
            },
            "type": "object",
            "title": "Muxes"
          }
        },
        "type": "object",
        "required": [
          "muxes"
        ],
        "title": "ListMuxResponse",
        "description": "ListMuxResponse is a Pydantic model that represents the response for fetching the multiplexers."
      },
      "ListTaskResponse": {
        "properties": {
          "tasks": {
            "items": {
              "$ref": "#/components/schemas/TaskResponse"
            },
            "type": "array",
            "title": "Tasks"
          }
        },
        "type": "object",
        "required": [
          "tasks"
        ],
        "title": "ListTaskResponse",
        "description": "Response model for a list of tasks."
      },
      "MenuModel": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "username": {
            "type": "string",
            "title": "Username"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "qids": {
            "items": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "type": "array",
            "title": "Qids"
          },
          "notify_bool": {
            "type": "boolean",
            "title": "Notify Bool",
            "default": false
          },
          "tasks": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tasks"
          },
          "task_details": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Task Details"
          },
          "tags": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tags"
          }
        },
        "type": "object",
        "required": [
          "name",
          "username",
          "description",
          "qids"
        ],
        "title": "MenuModel",
        "description": "Menu model.\n\nAttributes\n----------\n    name (str): The name of the menu.\n    username (str): The username of the user who created\n    description (str): Detailed description of the menu.\n    cal_plan (list[list[int]]): The calibration plan.\n    notify_bool (bool): The notification boolean.\n    tasks (list[str]): The tasks.\n    tags (list[str]): The tags."
      },
      "MetricsResponse": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "data": {
            "items": {
              "type": "object"
            },
            "type": "array",
            "title": "Data"
          }
        },
        "type": "object",
        "required": [
          "name",
          "data"
        ],
        "title": "MetricsResponse"
      },
      "MuxDetailResponse": {
        "properties": {
          "mux_id": {
            "type": "integer",
            "title": "Mux Id"
          },
          "detail": {
            "additionalProperties": {
              "additionalProperties": {
                "$ref": "#/components/schemas/server__routers__chip__Task"
              },
              "type": "object"
            },
            "type": "object",
            "title": "Detail"
          }
        },
        "type": "object",
        "required": [
          "mux_id",
          "detail"
        ],
        "title": "MuxDetailResponse",
        "description": "MuxDetailResponse is a Pydantic model that represents the response for fetching the multiplexer details."
      },
      "NodeInfo": {
        "properties": {
          "fill": {
            "type": "string",
            "title": "Fill"
          },
          "position": {
            "$ref": "#/components/schemas/Position"
          }
        },
        "type": "object",
        "required": [
          "fill",
          "position"
        ],
        "title": "NodeInfo"
      },
      "OneQubitCalibData": {
        "properties": {
          "resonator_frequency": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Data"
              },
              {
                "type": "null"
              }
            ]
          },
          "qubit_frequency": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Data"
              },
              {
                "type": "null"
              }
            ]
          },
          "t1": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Data"
              },
              {
                "type": "null"
              }
            ]
          },
          "t2_echo": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Data"
              },
              {
                "type": "null"
              }
            ]
          },
          "t2_star": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Data"
              },
              {
                "type": "null"
              }
            ]
          },
          "average_gate_fidelity": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Data"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "title": "OneQubitCalibData"
      },
      "OneQubitCalibResponse": {
        "properties": {
          "qpu_name": {
            "type": "string",
            "title": "Qpu Name"
          },
          "cooling_down_id": {
            "type": "integer",
            "title": "Cooling Down Id"
          },
          "label": {
            "type": "string",
            "title": "Label"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "node_info": {
            "$ref": "#/components/schemas/NodeInfo"
          },
          "one_qubit_calib_data": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OneQubitCalibData"
              },
              {
                "type": "null"
              }
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "qpu_name",
          "cooling_down_id",
          "label",
          "status",
          "node_info",
          "one_qubit_calib_data"
        ],
        "title": "OneQubitCalibResponse"
      },
      "ParamData": {
        "properties": {
          "label": {
            "type": "string",
            "title": "Label"
          },
          "value": {
            "type": "number",
            "title": "Value"
          },
          "unit": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Unit"
          }
        },
        "type": "object",
        "required": [
          "label",
          "value"
        ],
        "title": "ParamData"
      },
      "ParamResponse": {
        "properties": {
          "param_name": {
            "type": "string",
            "title": "Param Name"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/ParamData"
            },
            "type": "array",
            "title": "Data"
          }
        },
        "type": "object",
        "required": [
          "param_name",
          "data"
        ],
        "title": "ParamResponse"
      },
      "Position": {
        "properties": {
          "x": {
            "type": "number",
            "title": "X"
          },
          "y": {
            "type": "number",
            "title": "Y"
          }
        },
        "type": "object",
        "required": [
          "x",
          "y"
        ],
        "title": "Position"
      },
      "QPUInfoResponse": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "nodes": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Nodes"
          },
          "edges": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Edges"
          },
          "active": {
            "type": "boolean",
            "title": "Active"
          }
        },
        "type": "object",
        "required": [
          "name",
          "nodes",
          "edges",
          "active"
        ],
        "title": "QPUInfoResponse"
      },
      "QPUStatsResponse": {
        "properties": {
          "average_gate_fidelity": {
            "$ref": "#/components/schemas/Stats"
          },
          "resonator_frequency": {
            "$ref": "#/components/schemas/Stats"
          },
          "qubit_frequency": {
            "$ref": "#/components/schemas/Stats"
          },
          "t1": {
            "$ref": "#/components/schemas/Stats"
          },
          "t2_echo": {
            "$ref": "#/components/schemas/Stats"
          },
          "t2_star": {
            "$ref": "#/components/schemas/Stats"
          }
        },
        "type": "object",
        "required": [
          "average_gate_fidelity",
          "resonator_frequency",
          "qubit_frequency",
          "t1",
          "t2_echo",
          "t2_star"
        ],
        "title": "QPUStatsResponse"
      },
      "ScheduleCalibRequest": {
        "properties": {
          "menu_name": {
            "type": "string",
            "title": "Menu Name"
          },
          "scheduled": {
            "type": "string",
            "title": "Scheduled"
          }
        },
        "type": "object",
        "required": [
          "menu_name",
          "scheduled"
        ],
        "title": "ScheduleCalibRequest"
      },
      "ScheduleCalibResponse": {
        "properties": {
          "menu_name": {
            "type": "string",
            "title": "Menu Name"
          },
          "menu": {
            "$ref": "#/components/schemas/ExecuteCalibRequest"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "note": {
            "type": "string",
            "title": "Note"
          },
          "timezone": {
            "type": "string",
            "title": "Timezone"
          },
          "scheduled_time": {
            "type": "string",
            "title": "Scheduled Time"
          },
          "flow_run_id": {
            "type": "string",
            "title": "Flow Run Id"
          }
        },
        "type": "object",
        "required": [
          "menu_name",
          "menu",
          "description",
          "note",
          "timezone",
          "scheduled_time",
          "flow_run_id"
        ],
        "title": "ScheduleCalibResponse"
      },
      "Settings": {
        "properties": {
          "env": {
            "type": "string",
            "title": "Env"
          },
          "client_url": {
            "type": "string",
            "title": "Client Url"
          },
          "prefect_api_url": {
            "type": "string",
            "title": "Prefect Api Url"
          },
          "slack_bot_token": {
            "type": "string",
            "title": "Slack Bot Token"
          },
          "postgres_data_path": {
            "type": "string",
            "title": "Postgres Data Path"
          },
          "mongo_data_path": {
            "type": "string",
            "title": "Mongo Data Path"
          },
          "calib_data_path": {
            "type": "string",
            "title": "Calib Data Path"
          },
          "mongo_host": {
            "type": "string",
            "title": "Mongo Host"
          },
          "prefect_host": {
            "type": "string",
            "title": "Prefect Host"
          },
          "postgres_host": {
            "type": "string",
            "title": "Postgres Host"
          },
          "qpu_data_path": {
            "type": "string",
            "title": "Qpu Data Path"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "env",
          "client_url",
          "prefect_api_url",
          "slack_bot_token",
          "postgres_data_path",
          "mongo_data_path",
          "calib_data_path",
          "mongo_host",
          "prefect_host",
          "postgres_host",
          "qpu_data_path"
        ],
        "title": "Settings"
      },
      "Stats": {
        "properties": {
          "average_value": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Average Value"
          },
          "max_value": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Value"
          },
          "min_value": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Min Value"
          },
          "fig_path": {
            "type": "string",
            "title": "Fig Path"
          }
        },
        "type": "object",
        "required": [
          "average_value",
          "max_value",
          "min_value",
          "fig_path"
        ],
        "title": "Stats"
      },
      "TaskResponse": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "task_type": {
            "type": "string",
            "title": "Task Type"
          },
          "input_parameters": {
            "additionalProperties": {
              "$ref": "#/components/schemas/InputParameter"
            },
            "type": "object",
            "title": "Input Parameters"
          },
          "output_parameters": {
            "additionalProperties": {
              "$ref": "#/components/schemas/InputParameter"
            },
            "type": "object",
            "title": "Output Parameters"
          }
        },
        "type": "object",
        "required": [
          "name",
          "description",
          "task_type",
          "input_parameters",
          "output_parameters"
        ],
        "title": "TaskResponse",
        "description": "Response model for a task."
      },
      "Token": {
        "properties": {
          "access_token": {
            "type": "string",
            "title": "Access Token"
          },
          "token_type": {
            "type": "string",
            "title": "Token Type"
          }
        },
        "type": "object",
        "required": [
          "access_token",
          "token_type"
        ],
        "title": "Token"
      },
      "TwoQubitCalibData": {
        "properties": {
          "cross_resonance_power": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Data"
              },
              {
                "type": "null"
              }
            ]
          },
          "average_gate_fidelity": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Data"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "title": "TwoQubitCalibData"
      },
      "TwoQubitCalibResponse": {
        "properties": {
          "qpu_name": {
            "type": "string",
            "title": "Qpu Name"
          },
          "cooling_down_id": {
            "type": "integer",
            "title": "Cooling Down Id"
          },
          "label": {
            "type": "string",
            "title": "Label"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "edge_info": {
            "$ref": "#/components/schemas/EdgeInfo"
          },
          "two_qubit_calib_data": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TwoQubitCalibData"
              },
              {
                "type": "null"
              }
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "qpu_name",
          "cooling_down_id",
          "label",
          "status",
          "edge_info",
          "two_qubit_calib_data"
        ],
        "title": "TwoQubitCalibResponse"
      },
      "UpdateMenuRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "username": {
            "type": "string",
            "title": "Username"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "qids": {
            "items": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "type": "array",
            "title": "Qids"
          },
          "notify_bool": {
            "type": "boolean",
            "title": "Notify Bool",
            "default": false
          },
          "tasks": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tasks"
          },
          "task_details": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Task Details"
          },
          "tags": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tags"
          }
        },
        "type": "object",
        "required": [
          "name",
          "username",
          "description",
          "qids"
        ],
        "title": "UpdateMenuRequest",
        "description": "UpdateMenuRequest is a Pydantic model for updating a menu item."
      },
      "UpdateMenuResponse": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "UpdateMenuResponse",
        "description": "UpdateMenuResponse is a Pydantic model for the update menu response."
      },
      "User": {
        "properties": {
          "username": {
            "type": "string",
            "title": "Username"
          },
          "full_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Full Name"
          },
          "disabled": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Disabled"
          }
        },
        "type": "object",
        "required": [
          "username"
        ],
        "title": "User"
      },
      "UserCreate": {
        "properties": {
          "username": {
            "type": "string",
            "title": "Username"
          },
          "password": {
            "type": "string",
            "title": "Password"
          },
          "full_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Full Name"
          }
        },
        "type": "object",
        "required": [
          "username",
          "password"
        ],
        "title": "UserCreate"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      },
      "server__routers__chip__Task": {
        "properties": {
          "task_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Task Id"
          },
          "qid": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Qid"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "default": ""
          },
          "upstream_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Upstream Id"
          },
          "status": {
            "type": "string",
            "title": "Status",
            "default": "pending"
          },
          "message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Message"
          },
          "input_parameters": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Input Parameters"
          },
          "output_parameters": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Output Parameters"
          },
          "output_parameter_names": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Output Parameter Names"
          },
          "note": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Note"
          },
          "figure_path": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Figure Path"
          },
          "raw_data_path": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Raw Data Path"
          },
          "start_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Start At"
          },
          "end_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "End At"
          },
          "elapsed_time": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Elapsed Time"
          },
          "task_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Task Type"
          }
        },
        "type": "object",
        "title": "Task",
        "description": "Task is a Pydantic model that represents a task."
      },
      "server__routers__execution_v2__Task": {
        "properties": {
          "task_id": {
            "type": "string",
            "title": "Task Id"
          },
          "qid": {
            "type": "string",
            "title": "Qid",
            "default": ""
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "upstream_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Upstream Id",
            "default": ""
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "input_parameters": {
            "type": "object",
            "title": "Input Parameters"
          },
          "output_parameters": {
            "type": "object",
            "title": "Output Parameters"
          },
          "output_parameter_names": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Output Parameter Names"
          },
          "note": {
            "type": "object",
            "title": "Note"
          },
          "figure_path": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Figure Path"
          },
          "start_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Start At"
          },
          "end_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "End At"
          },
          "elapsed_time": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Elapsed Time"
          },
          "task_type": {
            "type": "string",
            "title": "Task Type"
          }
        },
        "type": "object",
        "required": [
          "task_id",
          "name",
          "status",
          "message",
          "task_type"
        ],
        "title": "Task",
        "description": "Task is a Pydantic model that represents a task in the execution response.\n\nAttributes\n----------\n    task_id (str): The ID of the task.\n    name (str): The name of the task.\n    upstream_id (Optional[str]): The ID of the upstream task.\n    status (str): The current status of the task.\n    message (str): The message associated with the task.\n    input_parameters (dict[str, Any]): The input parameters of the task.\n    output_parameters (dict[str, Any]): The output parameters of the task.\n    output_parameter_names (List[str]): The names of the output parameters.\n    note (dict[str, Any]): The note associated with the task.\n    figure_path (List[str]): The paths to the figures associated with the task.\n    start_at (Optional[str]): The start time of the task.\n    end_at (Optional[str]): The end time of the task.\n    elapsed_time (Optional[str]): The total elapsed time of the task.\n    task_type (str): The type of the task.\ndef modify_name(cls, v: str, values: dict[str, Any]) -> str:"
      }
    },
    "securitySchemes": {
      "APIKeyHeader": {
        "type": "apiKey",
        "in": "header",
        "name": "X-Username"
      }
    }
  },
  "tags": [
    {
      "name": "auth",
      "description": "Authentication operations"
    },
    {
      "name": "calibration",
      "description": "Calibration operations"
    },
    {
      "name": "chip",
      "description": "Chip operations"
    },
    {
      "name": "execution",
      "description": "Execution operations"
    },
    {
      "name": "experiment",
      "description": "Experiment operations"
    },
    {
      "name": "file",
      "description": "File operations"
    },
    {
      "name": "fridges",
      "description": "Fridge operations"
    },
    {
      "name": "menu",
      "description": "Menu operations"
    },
    {
      "name": "qpu",
      "description": "QPU operations"
    },
    {
      "name": "settings",
      "description": "Settings operations"
    },
    {
      "name": "task",
      "description": "Task operations"
    },
    {
      "name": "executionV2",
      "description": "Execution V2 operations"
    }
  ]
}
